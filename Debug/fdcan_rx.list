
fdcan_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  24000010  08006160  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001ec  08006160  000201ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ee86  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e3a  00000000  00000000  0003eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00041d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cf8  00000000  00000000  00042ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030780  00000000  00000000  000437c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011a42  00000000  00000000  00073f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d68b  00000000  00000000  0008598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c3015  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000039fc  00000000  00000000  001c3068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006094 	.word	0x08006094

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006094 	.word	0x08006094

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005ea:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 80005ec:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <MX_FDCAN1_Init+0xfc>)
 80005ee:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80005f0:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000600:	2201      	movs	r2, #1
 8000602:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000606:	2200      	movs	r2, #0
 8000608:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800060c:	2200      	movs	r2, #0
 800060e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000610:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000612:	2210      	movs	r2, #16
 8000614:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000618:	2201      	movs	r2, #1
 800061a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800061e:	220b      	movs	r2, #11
 8000620:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000624:	2204      	movs	r2, #4
 8000626:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 16;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800062a:	2210      	movs	r2, #16
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000630:	2201      	movs	r2, #1
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000636:	220b      	movs	r2, #11
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800063c:	2204      	movs	r2, #4
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000648:	2201      	movs	r2, #1
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800064e:	2200      	movs	r2, #0
 8000650:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 2;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000654:	2202      	movs	r2, #2
 8000656:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800065a:	2204      	movs	r2, #4
 800065c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000660:	2200      	movs	r2, #0
 8000662:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000666:	2204      	movs	r2, #4
 8000668:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 2;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800066c:	2202      	movs	r2, #2
 800066e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000672:	2204      	movs	r2, #4
 8000674:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000684:	2200      	movs	r2, #0
 8000686:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 800068a:	2200      	movs	r2, #0
 800068c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000690:	2204      	movs	r2, #4
 8000692:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 8000696:	f000 fd53 	bl	8001140 <HAL_FDCAN_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80006a0:	f000 f9e0 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80006ac:	2302      	movs	r3, #2
 80006ae:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0; // ID Node2
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_FDCAN1_Init+0xf8>)
 80006c6:	f000 ff1d 	bl	8001504 <HAL_FDCAN_ConfigFilter>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_FDCAN1_Init+0xf0>
         {
            Error_Handler();
 80006d0:	f000 f9c8 	bl	8000a64 <Error_Handler>
         }

  /* USER CODE END FDCAN1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2400002c 	.word	0x2400002c
 80006e0:	4000a000 	.word	0x4000a000

080006e4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0b8      	sub	sp, #224	; 0xe0
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	22b8      	movs	r2, #184	; 0xb8
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f005 fcbd 	bl	8006084 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a29      	ldr	r2, [pc, #164]	; (80007b4 <HAL_FDCAN_MspInit+0xd0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d14b      	bne.n	80007ac <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000718:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800071a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800071e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f002 ffe6 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000732:	f000 f997 	bl	8000a64 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_FDCAN_MspInit+0xd4>)
 8000738:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800073c:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <HAL_FDCAN_MspInit+0xd4>)
 800073e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000742:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_FDCAN_MspInit+0xd4>)
 8000748:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800074c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_FDCAN_MspInit+0xd4>)
 8000756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_FDCAN_MspInit+0xd4>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_FDCAN_MspInit+0xd4>)
 8000766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000772:	2303      	movs	r3, #3
 8000774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800078a:	2309      	movs	r3, #9
 800078c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_FDCAN_MspInit+0xd8>)
 8000798:	f001 fdfa 	bl	8002390 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2013      	movs	r0, #19
 80007a2:	f000 fc98 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007a6:	2013      	movs	r0, #19
 80007a8:	f000 fcaf 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	37e0      	adds	r7, #224	; 0xe0
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	4000a000 	.word	0x4000a000
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58020c00 	.word	0x58020c00

080007c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <MX_GPIO_Init+0xa4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_GPIO_Init+0xa4>)
 8000806:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_GPIO_Init+0xa4>)
 8000814:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_GPIO_Init+0xa4>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_GPIO_Init+0xa4>)
 8000824:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_GPIO_Init+0xa8>)
 8000838:	f001 ff5a 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800083c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xa8>)
 8000856:	f001 fd9b 	bl	8002390 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024400 	.word	0x58024400
 8000868:	58020400 	.word	0x58020400

0800086c <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int indx = 8;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d014      	beq.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
	  //?��기서?�� 먼�? RX FIFO0?�� ?��?�� ?��보�?? RxHeader�??????? 복사?���??????? ?��?��?���??????? RxData 배열�??????? 복사?��?��?��.
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 ff0a 	bl	80016a0 <HAL_FDCAN_GetRxMessage>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000892:	f000 f8e7 	bl	8000a64 <Error_Handler>
//        {
//        /* Reception Error */
//        Error_Handler();
//        }
    //그런 ?��?�� ?�� 메시�????????�� ???�� ?��림을 ?��?�� ?��?��?��?��?��?��.
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000896:	2200      	movs	r2, #0
 8000898:	2101      	movs	r1, #1
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f001 f86e 	bl	800197c <HAL_FDCAN_ActivateNotification>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80008a6:	f000 f8dd 	bl	8000a64 <Error_Handler>
    }
    //FDCAN2 콜백�??????? ?���??????? ?��기서?�� ?��?��?���??????? ?��?��?���??????? ?��?��?��?��. while 루프?��?�� FDCAN1?�� ?��?�� 매초 ?��?��?���??????? ?��?��?���??????? ?��문입?��?��.
  }
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	240000f4 	.word	0x240000f4
 80008b8:	24000130 	.word	0x24000130

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fa77 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f85f 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f7ff ff79 	bl	80007c0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80008ce:	f7ff fe89 	bl	80005e4 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80008d2:	f000 f993 	bl	8000bfc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Configure Tx buffer message */
       // Ignore because FDCAN_NO_TX_EVENTS

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3,3,0,1);
 80008d6:	2301      	movs	r3, #1
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2203      	movs	r2, #3
 80008de:	2103      	movs	r1, #3
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <main+0xbc>)
 80008e2:	f000 fe85 	bl	80015f0 <HAL_FDCAN_ConfigGlobalFilter>
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80008e6:	4824      	ldr	r0, [pc, #144]	; (8000978 <main+0xbc>)
 80008e8:	f000 feaf 	bl	800164a <HAL_FDCAN_Start>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <main+0x3a>
    {
      Error_Handler();
 80008f2:	f000 f8b7 	bl	8000a64 <Error_Handler>
    }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2101      	movs	r1, #1
 80008fa:	481f      	ldr	r0, [pc, #124]	; (8000978 <main+0xbc>)
 80008fc:	f001 f83e 	bl	800197c <HAL_FDCAN_ActivateNotification>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <main+0x4e>
    {
      /* Notification Error */
      Error_Handler();
 8000906:	f000 f8ad 	bl	8000a64 <Error_Handler>
    }
  TxHeader.Identifier = 0x33;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <main+0xc0>)
 800090c:	2233      	movs	r2, #51	; 0x33
 800090e:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <main+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <main+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <main+0xc0>)
 800091e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000922:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <main+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <main+0xc0>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <main+0xc0>)
 8000932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000936:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <main+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0x0;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <main+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
//   	HAL_Delay (500);
	  	   //메시�???????�??????? FIFO ??기열?�� 추�??���??????? 메시�???????�??????? CAN 버스�??????? ?��?��?��?��?��.



	   if (RxData_From_Node2[0]=='3')
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <main+0xc4>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b33      	cmp	r3, #51	; 0x33
 800094a:	d1fb      	bne.n	8000944 <main+0x88>
		   {HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <main+0xc8>)
 8000954:	f001 fecc 	bl	80026f0 <HAL_GPIO_WritePin>
	   	   HAL_Delay (1000);
 8000958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095c:	f000 fabc 	bl	8000ed8 <HAL_Delay>
	   	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <main+0xc8>)
 8000968:	f001 fec2 	bl	80026f0 <HAL_GPIO_WritePin>
     	   HAL_Delay (1000);}
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f000 fab2 	bl	8000ed8 <HAL_Delay>
	   if (RxData_From_Node2[0]=='3')
 8000974:	e7e6      	b.n	8000944 <main+0x88>
 8000976:	bf00      	nop
 8000978:	2400002c 	.word	0x2400002c
 800097c:	2400010c 	.word	0x2400010c
 8000980:	240000fc 	.word	0x240000fc
 8000984:	58020400 	.word	0x58020400

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09c      	sub	sp, #112	; 0x70
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	224c      	movs	r2, #76	; 0x4c
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f005 fb74 	bl	8006084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2220      	movs	r2, #32
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 fb6e 	bl	8006084 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009a8:	2004      	movs	r0, #4
 80009aa:	f001 febb 	bl	8002724 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <SystemClock_Config+0xd8>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <SystemClock_Config+0xd8>)
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <SystemClock_Config+0xd8>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ca:	bf00      	nop
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <SystemClock_Config+0xd8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d8:	d1f8      	bne.n	80009cc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009da:	2302      	movs	r3, #2
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009de:	2301      	movs	r3, #1
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009f2:	2308      	movs	r3, #8
 80009f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fee0 	bl	80027d8 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a1e:	f000 f821 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	233f      	movs	r3, #63	; 0x3f
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a40:	2340      	movs	r3, #64	; 0x40
 8000a42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fac9 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a54:	f000 f806 	bl	8000a64 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	; 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58024800 	.word	0x58024800

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x30>)
 8000a88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f9d2 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <FDCAN1_IT0_IRQHandler+0x10>)
 8000afe:	f000 ffb7 	bl	8001a70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2400002c 	.word	0x2400002c

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <SystemInit+0xd0>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <SystemInit+0xd0>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b20:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <SystemInit+0xd4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d807      	bhi.n	8000b3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <SystemInit+0xd4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 030f 	bic.w	r3, r3, #15
 8000b34:	4a2a      	ldr	r2, [pc, #168]	; (8000be0 <SystemInit+0xd4>)
 8000b36:	f043 0303 	orr.w	r3, r3, #3
 8000b3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <SystemInit+0xd8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <SystemInit+0xd8>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <SystemInit+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <SystemInit+0xd8>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4924      	ldr	r1, [pc, #144]	; (8000be4 <SystemInit+0xd8>)
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <SystemInit+0xdc>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <SystemInit+0xd4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <SystemInit+0xd4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 030f 	bic.w	r3, r3, #15
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <SystemInit+0xd4>)
 8000b70:	f043 0303 	orr.w	r3, r3, #3
 8000b74:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <SystemInit+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <SystemInit+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <SystemInit+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <SystemInit+0xd8>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <SystemInit+0xe0>)
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <SystemInit+0xd8>)
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <SystemInit+0xe4>)
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <SystemInit+0xd8>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <SystemInit+0xe8>)
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <SystemInit+0xd8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <SystemInit+0xd8>)
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <SystemInit+0xe8>)
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <SystemInit+0xd8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <SystemInit+0xd8>)
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <SystemInit+0xe8>)
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <SystemInit+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <SystemInit+0xd8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <SystemInit+0xd8>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <SystemInit+0xd8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <SystemInit+0xec>)
 8000bcc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bd0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	52002000 	.word	0x52002000
 8000be4:	58024400 	.word	0x58024400
 8000be8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bec:	02020200 	.word	0x02020200
 8000bf0:	01ff0000 	.word	0x01ff0000
 8000bf4:	01010280 	.word	0x01010280
 8000bf8:	52004000 	.word	0x52004000

08000bfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_USART3_UART_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c46:	f004 f885 	bl	8004d54 <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f7ff ff08 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c58:	f005 f918 	bl	8005e8c <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f7ff feff 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c6a:	f005 f94d 	bl	8005f08 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f7ff fef6 	bl	8000a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c7a:	f005 f8ce 	bl	8005e1a <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f7ff feee 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	24000158 	.word	0x24000158
 8000c90:	40004800 	.word	0x40004800

08000c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b8      	sub	sp, #224	; 0xe0
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	22b8      	movs	r2, #184	; 0xb8
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 f9e5 	bl	8006084 <memset>
  if(uartHandle->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <HAL_UART_MspInit+0xc0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d142      	bne.n	8000d4a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fd10 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff fec1 	bl	8000a64 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000ce4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d46:	f001 fb23 	bl	8002390 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	37e0      	adds	r7, #224	; 0xe0
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004800 	.word	0x40004800
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020c00 	.word	0x58020c00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d64:	f7ff fed2 	bl	8000b0c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f005 f947 	bl	8006020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fd93 	bl	80008bc <main>
  bx  lr
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000da0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000da4:	08006150 	.word	0x08006150
  ldr r2, =_sbss
 8000da8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dac:	240001ec 	.word	0x240001ec

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f000 f980 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000dc0:	f002 fac4 	bl	800334c <HAL_RCC_GetSysClockFreq>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_Init+0x68>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	4913      	ldr	r1, [pc, #76]	; (8000e20 <HAL_Init+0x6c>)
 8000dd2:	5ccb      	ldrb	r3, [r1, r3]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_Init+0x68>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_Init+0x6c>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x70>)
 8000df6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_Init+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f814 	bl	8000e2c <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e002      	b.n	8000e14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0e:	f7ff fe2f 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	080060f8 	.word	0x080060f8
 8000e24:	24000004 	.word	0x24000004
 8000e28:	24000000 	.word	0x24000000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_InitTick+0x60>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e021      	b.n	8000e84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_InitTick+0x64>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_InitTick+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f965 	bl	8001126 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x68>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2400000c 	.word	0x2400000c
 8000e90:	24000000 	.word	0x24000000
 8000e94:	24000008 	.word	0x24000008

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2400000c 	.word	0x2400000c
 8000ebc:	240001e8 	.word	0x240001e8

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	240001e8 	.word	0x240001e8

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2400000c 	.word	0x2400000c

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	05fa0000 	.word	0x05fa0000

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff40 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff33 	bl	8000f84 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa4 	bl	800107c <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b098      	sub	sp, #96	; 0x60
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001148:	4a84      	ldr	r2, [pc, #528]	; (800135c <HAL_FDCAN_Init+0x21c>)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4611      	mov	r1, r2
 8001150:	224c      	movs	r2, #76	; 0x4c
 8001152:	4618      	mov	r0, r3
 8001154:	f004 ff88 	bl	8006068 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e1ca      	b.n	80014f8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_FDCAN_Init+0x220>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d106      	bne.n	800117a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff faa8 	bl	80006e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	699a      	ldr	r2, [r3, #24]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0210 	bic.w	r2, r2, #16
 80011a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a4:	f7ff fe8c 	bl	8000ec0 <HAL_GetTick>
 80011a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011aa:	e014      	b.n	80011d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011ac:	f7ff fe88 	bl	8000ec0 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b0a      	cmp	r3, #10
 80011b8:	d90d      	bls.n	80011d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e190      	b.n	80014f8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d0e3      	beq.n	80011ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f4:	f7ff fe64 	bl	8000ec0 <HAL_GetTick>
 80011f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011fa:	e014      	b.n	8001226 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011fc:	f7ff fe60 	bl	8000ec0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b0a      	cmp	r3, #10
 8001208:	d90d      	bls.n	8001226 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2203      	movs	r2, #3
 800121e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e168      	b.n	80014f8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0e3      	beq.n	80011fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0202 	orr.w	r2, r2, #2
 8001242:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7c1b      	ldrb	r3, [r3, #16]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	e007      	b.n	800126e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800126c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7c5b      	ldrb	r3, [r3, #17]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	e007      	b.n	8001298 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001296:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7c9b      	ldrb	r3, [r3, #18]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	e007      	b.n	80012c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80012e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0210 	bic.w	r2, r2, #16
 80012f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d108      	bne.n	8001312 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0204 	orr.w	r2, r2, #4
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	e030      	b.n	8001374 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d02c      	beq.n	8001374 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d020      	beq.n	8001364 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001330:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0210 	orr.w	r2, r2, #16
 8001340:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d114      	bne.n	8001374 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0220 	orr.w	r2, r2, #32
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	e00b      	b.n	8001374 <HAL_FDCAN_Init+0x234>
 800135c:	080060ac 	.word	0x080060ac
 8001360:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0220 	orr.w	r2, r2, #32
 8001372:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	3b01      	subs	r3, #1
 800137a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	3b01      	subs	r3, #1
 8001382:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001384:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800138c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	3b01      	subs	r3, #1
 8001396:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800139c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800139e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013a8:	d115      	bne.n	80013d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	3b01      	subs	r3, #1
 80013b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80013b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	3b01      	subs	r3, #1
 80013c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80013c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	3b01      	subs	r3, #1
 80013cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80013d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80013d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	4413      	add	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d012      	beq.n	8001428 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800140a:	f023 0107 	bic.w	r1, r3, #7
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001418:	4413      	add	r3, r2
 800141a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	2b00      	cmp	r3, #0
 800142e:	d012      	beq.n	8001456 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001438:	f023 0107 	bic.w	r1, r3, #7
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001446:	4413      	add	r3, r2
 8001448:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	2b00      	cmp	r3, #0
 800145c:	d013      	beq.n	8001486 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001466:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001474:	4413      	add	r3, r2
 8001476:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800147a:	011a      	lsls	r2, r3, #4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001496:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014a4:	4413      	add	r3, r2
 80014a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80014aa:	021a      	lsls	r2, r3, #8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_FDCAN_Init+0x3c0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d107      	bne.n	80014d0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f022 0203 	bic.w	r2, r2, #3
 80014ce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fdcb 	bl	8002084 <FDCAN_CalcultateRamBlockAddresses>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80014f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3760      	adds	r7, #96	; 0x60
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	4000a000 	.word	0x4000a000

08001504 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001514:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d002      	beq.n	8001522 <HAL_FDCAN_ConfigFilter+0x1e>
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d157      	bne.n	80015d2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d12b      	bne.n	8001582 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b07      	cmp	r3, #7
 8001530:	d10d      	bne.n	800154e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800153e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001544:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001546:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00e      	b.n	800156c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800155a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001562:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e025      	b.n	80015ce <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	075a      	lsls	r2, r3, #29
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b07      	cmp	r3, #7
 8001596:	d103      	bne.n	80015a0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e006      	b.n	80015ae <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	079a      	lsls	r2, r3, #30
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3304      	adds	r3, #4
 80015c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e008      	b.n	80015e4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015d8:	f043 0202 	orr.w	r2, r3, #2
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
  }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d110      	bne.n	800162c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001612:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001618:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	e008      	b.n	800163e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001632:	f043 0204 	orr.w	r2, r3, #4
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d111      	bne.n	8001682 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e008      	b.n	8001694 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b08b      	sub	sp, #44	; 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80016b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80016ba:	7efb      	ldrb	r3, [r7, #27]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	f040 814b 	bne.w	8001958 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	d14d      	bne.n	8001764 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80016d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016de:	f043 0220 	orr.w	r2, r3, #32
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e13e      	b.n	800196a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e12c      	b.n	800196a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001718:	0e1b      	lsrs	r3, r3, #24
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10b      	bne.n	800173a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800172a:	0fdb      	lsrs	r3, r3, #31
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001734:	d101      	bne.n	800173a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	4413      	add	r3, r2
 800174c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	69f9      	ldr	r1, [r7, #28]
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e069      	b.n	8001838 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b41      	cmp	r3, #65	; 0x41
 8001768:	d14d      	bne.n	8001806 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001772:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001780:	f043 0220 	orr.w	r2, r3, #32
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0ed      	b.n	800196a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0db      	b.n	800196a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80017ba:	0e1b      	lsrs	r3, r3, #24
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10b      	bne.n	80017dc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80017cc:	0fdb      	lsrs	r3, r3, #31
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017d6:	d101      	bne.n	80017dc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017d8:	2301      	movs	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	69f9      	ldr	r1, [r7, #28]
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	e018      	b.n	8001838 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d309      	bcc.n	8001824 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001816:	f043 0220 	orr.w	r2, r3, #32
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0a2      	b.n	800196a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0c9b      	lsrs	r3, r3, #18
 8001852:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e005      	b.n	8001868 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	3304      	adds	r3, #4
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0e1b      	lsrs	r3, r3, #24
 80018ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0fda      	lsrs	r2, r3, #31
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	3304      	adds	r3, #4
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	e00a      	b.n	80018f2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	441a      	add	r2, r3
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	440b      	add	r3, r1
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	3301      	adds	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	0c1b      	lsrs	r3, r3, #16
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	4293      	cmp	r3, r2
 8001902:	d3eb      	bcc.n	80018dc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d105      	bne.n	8001916 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001914:	e01e      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b41      	cmp	r3, #65	; 0x41
 800191a:	d105      	bne.n	8001928 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001926:	e015      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b1f      	cmp	r3, #31
 800192c:	d808      	bhi.n	8001940 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800193e:	e009      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 021f 	and.w	r2, r3, #31
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e008      	b.n	800196a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800195e:	f043 0208 	orr.w	r2, r3, #8
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	372c      	adds	r7, #44	; 0x2c
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	08006108 	.word	0x08006108

0800197c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800198e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d002      	beq.n	800199c <HAL_FDCAN_ActivateNotification+0x20>
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d155      	bne.n	8001a48 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ba:	e014      	b.n	80019e6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	4013      	ands	r3, r2
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d108      	bne.n	80019de <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0202 	orr.w	r2, r2, #2
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
 80019dc:	e003      	b.n	80019e6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2203      	movs	r2, #3
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_FDCAN_ActivateNotification+0xec>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6553      	str	r3, [r2, #84]	; 0x54
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0f9b      	lsrs	r3, r3, #30
 8001a3e:	490b      	ldr	r1, [pc, #44]	; (8001a6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e008      	b.n	8001a5a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	3fcfffff 	.word	0x3fcfffff
 8001a6c:	4000a800 	.word	0x4000a800

08001a70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b092      	sub	sp, #72	; 0x48
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	079b      	lsls	r3, r3, #30
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001a80:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	079b      	lsls	r3, r3, #30
 8001a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a88:	4013      	ands	r3, r2
 8001a8a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ab8:	4013      	ands	r3, r2
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ada:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ae8:	4013      	ands	r3, r2
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b00:	4013      	ands	r3, r2
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d011      	beq.n	8001b36 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00a      	beq.n	8001b36 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
 8001b2a:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fa5a 	bl	8001fea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01e      	beq.n	8001b82 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d017      	beq.n	8001b82 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b66:	4013      	ands	r3, r2
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	651a      	str	r2, [r3, #80]	; 0x50
 8001b74:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fa0b 	bl	8001f98 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_FDCAN_IRQHandler+0x250>)
 8001b90:	400b      	ands	r3, r1
 8001b92:	6513      	str	r3, [r2, #80]	; 0x50
 8001b94:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b98:	0f9b      	lsrs	r3, r3, #30
 8001b9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001b9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f9c4 	bl	8001f2c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_FDCAN_IRQHandler+0x250>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8001bb6:	4a41      	ldr	r2, [pc, #260]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bba:	0f9b      	lsrs	r3, r3, #30
 8001bbc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001bbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f9be 	bl	8001f42 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_FDCAN_IRQHandler+0x250>)
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	6513      	str	r3, [r2, #80]	; 0x50
 8001bd8:	4a38      	ldr	r2, [pc, #224]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bdc:	0f9b      	lsrs	r3, r3, #30
 8001bde:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fe42 	bl	800086c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00d      	beq.n	8001c0a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_FDCAN_IRQHandler+0x250>)
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	6513      	str	r3, [r2, #80]	; 0x50
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfe:	0f9b      	lsrs	r3, r3, #30
 8001c00:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f9a7 	bl	8001f58 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d011      	beq.n	8001c3c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f999 	bl	8001f6e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01e      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d017      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	651a      	str	r2, [r3, #80]	; 0x50
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f97d 	bl	8001f82 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00f      	beq.n	8001cc4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cac:	651a      	str	r2, [r3, #80]	; 0x50
 8001cae:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_FDCAN_IRQHandler+0x24c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f97a 	bl	8001fae <HAL_FDCAN_RxBufferNewMessageCallback>
 8001cba:	e003      	b.n	8001cc4 <HAL_FDCAN_IRQHandler+0x254>
 8001cbc:	4000a800 	.word	0x4000a800
 8001cc0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d011      	beq.n	8001cf6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8001cea:	4b8d      	ldr	r3, [pc, #564]	; (8001f20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f966 	bl	8001fc2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d011      	beq.n	8001d28 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d1c:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f957 	bl	8001fd6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00f      	beq.n	8001d64 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d4e:	4b74      	ldr	r3, [pc, #464]	; (8001f20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d70:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001d72:	400b      	ands	r3, r1
 8001d74:	6513      	str	r3, [r2, #80]	; 0x50
 8001d76:	4a6a      	ldr	r2, [pc, #424]	; (8001f20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	0f9b      	lsrs	r3, r3, #30
 8001d7c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f946 	bl	8002012 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d011      	beq.n	8001db0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d92:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001d94:	400b      	ands	r3, r1
 8001d96:	6513      	str	r3, [r2, #80]	; 0x50
 8001d98:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9c:	0f9b      	lsrs	r3, r3, #30
 8001d9e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5c      	ldr	r2, [pc, #368]	; (8001f28 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f040 80a6 	bne.w	8001f08 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 809e 	beq.w	8001f08 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	4013      	ands	r3, r2
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001dee:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	6a3a      	ldr	r2, [r7, #32]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e06:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001e1e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001e36:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8e7 	bl	8002028 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001e68:	6a39      	ldr	r1, [r7, #32]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8e7 	bl	800203e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01b      	beq.n	8001eb6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d014      	beq.n	8001eb6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e92:	0c1b      	lsrs	r3, r3, #16
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	6939      	ldr	r1, [r7, #16]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8cf 	bl	8002054 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ec4:	69f9      	ldr	r1, [r7, #28]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8d0 	bl	800206c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f873 	bl	8001ffe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3748      	adds	r7, #72	; 0x48
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	4000a800 	.word	0x4000a800
 8001f24:	3fcfffff 	.word	0x3fcfffff
 8001f28:	4000a000 	.word	0x4000a000

08001f2c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800209a:	4ba7      	ldr	r3, [pc, #668]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	0091      	lsls	r1, r2, #2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	430b      	orrs	r3, r1
 80020a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	4413      	add	r3, r2
 80020d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020da:	4b97      	ldr	r3, [pc, #604]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	0091      	lsls	r1, r2, #2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	430b      	orrs	r3, r1
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800211c:	4b86      	ldr	r3, [pc, #536]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800211e:	4013      	ands	r3, r2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	0091      	lsls	r1, r2, #2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002136:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	4413      	add	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002164:	4b74      	ldr	r3, [pc, #464]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002166:	4013      	ands	r3, r2
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	0091      	lsls	r1, r2, #2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800217e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80021ac:	4b62      	ldr	r3, [pc, #392]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	0091      	lsls	r1, r2, #2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	0091      	lsls	r1, r2, #2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	041a      	lsls	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800221c:	4013      	ands	r3, r2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	0091      	lsls	r1, r2, #2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	430b      	orrs	r3, r1
 8002228:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002234:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002250:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	061a      	lsls	r2, r3, #24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800226a:	4413      	add	r3, r2
 800226c:	009a      	lsls	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	441a      	add	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	441a      	add	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	441a      	add	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	441a      	add	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d915      	bls.n	8002360 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002334:	e006      	b.n	8002344 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002336:	bf00      	nop
 8002338:	ffff0003 	.word	0xffff0003
 800233c:	10002b00 	.word	0x10002b00
 8002340:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800234a:	f043 0220 	orr.w	r2, r3, #32
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2203      	movs	r2, #3
 8002358:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e010      	b.n	8002382 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e005      	b.n	8002374 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3f3      	bcc.n	8002368 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800239e:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <HAL_GPIO_Init+0x234>)
 80023a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023a2:	e194      	b.n	80026ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8186 	beq.w	80026c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d005      	beq.n	80023d4 <HAL_GPIO_Init+0x44>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d130      	bne.n	8002436 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800240a:	2201      	movs	r2, #1
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 0201 	and.w	r2, r3, #1
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b03      	cmp	r3, #3
 8002440:	d017      	beq.n	8002472 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d123      	bne.n	80024c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	69b9      	ldr	r1, [r7, #24]
 80024c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0203 	and.w	r2, r3, #3
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80e0 	beq.w	80026c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002508:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_GPIO_Init+0x238>)
 800250a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <HAL_GPIO_Init+0x238>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_GPIO_Init+0x238>)
 800251a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_GPIO_Init+0x23c>)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_GPIO_Init+0x240>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d052      	beq.n	80025f8 <HAL_GPIO_Init+0x268>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_GPIO_Init+0x244>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d031      	beq.n	80025be <HAL_GPIO_Init+0x22e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <HAL_GPIO_Init+0x248>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02b      	beq.n	80025ba <HAL_GPIO_Init+0x22a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_GPIO_Init+0x24c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d025      	beq.n	80025b6 <HAL_GPIO_Init+0x226>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_GPIO_Init+0x250>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01f      	beq.n	80025b2 <HAL_GPIO_Init+0x222>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_GPIO_Init+0x254>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x21e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x258>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x21a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_GPIO_Init+0x25c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x216>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_GPIO_Init+0x260>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x212>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_GPIO_Init+0x264>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x20e>
 800259a:	2309      	movs	r3, #9
 800259c:	e02d      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 800259e:	230a      	movs	r3, #10
 80025a0:	e02b      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025a2:	2308      	movs	r3, #8
 80025a4:	e029      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e027      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025aa:	2306      	movs	r3, #6
 80025ac:	e025      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025ae:	2305      	movs	r3, #5
 80025b0:	e023      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025b2:	2304      	movs	r3, #4
 80025b4:	e021      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e01f      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e01d      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e01b      	b.n	80025fa <HAL_GPIO_Init+0x26a>
 80025c2:	bf00      	nop
 80025c4:	58000080 	.word	0x58000080
 80025c8:	58024400 	.word	0x58024400
 80025cc:	58000400 	.word	0x58000400
 80025d0:	58020000 	.word	0x58020000
 80025d4:	58020400 	.word	0x58020400
 80025d8:	58020800 	.word	0x58020800
 80025dc:	58020c00 	.word	0x58020c00
 80025e0:	58021000 	.word	0x58021000
 80025e4:	58021400 	.word	0x58021400
 80025e8:	58021800 	.word	0x58021800
 80025ec:	58021c00 	.word	0x58021c00
 80025f0:	58022000 	.word	0x58022000
 80025f4:	58022400 	.word	0x58022400
 80025f8:	2300      	movs	r3, #0
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	f002 0203 	and.w	r2, r2, #3
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4093      	lsls	r3, r2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260a:	4938      	ldr	r1, [pc, #224]	; (80026ec <HAL_GPIO_Init+0x35c>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800263e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f47f ae63 	bne.w	80023a4 <HAL_GPIO_Init+0x14>
  }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3724      	adds	r7, #36	; 0x24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	58000400 	.word	0x58000400

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	2b06      	cmp	r3, #6
 8002736:	d00a      	beq.n	800274e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e040      	b.n	80027cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e03e      	b.n	80027cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002756:	491f      	ldr	r1, [pc, #124]	; (80027d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800275e:	f7fe fbaf 	bl	8000ec0 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002764:	e009      	b.n	800277a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002766:	f7fe fbab 	bl	8000ec0 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002774:	d901      	bls.n	800277a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e028      	b.n	80027cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	d1ee      	bne.n	8002766 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b1e      	cmp	r3, #30
 800278c:	d008      	beq.n	80027a0 <HAL_PWREx_ConfigSupply+0x7c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b2e      	cmp	r3, #46	; 0x2e
 8002792:	d005      	beq.n	80027a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b1d      	cmp	r3, #29
 8002798:	d002      	beq.n	80027a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b2d      	cmp	r3, #45	; 0x2d
 800279e:	d114      	bne.n	80027ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027a0:	f7fe fb8e 	bl	8000ec0 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027a6:	e009      	b.n	80027bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a8:	f7fe fb8a 	bl	8000ec0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b6:	d901      	bls.n	80027bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d1ee      	bne.n	80027a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58024800 	.word	0x58024800

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e3f3      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80b3 	beq.w	800295e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f8:	4b9e      	ldr	r3, [pc, #632]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002802:	4b9c      	ldr	r3, [pc, #624]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	2b10      	cmp	r3, #16
 800280c:	d007      	beq.n	800281e <HAL_RCC_OscConfig+0x46>
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	2b18      	cmp	r3, #24
 8002812:	d112      	bne.n	800283a <HAL_RCC_OscConfig+0x62>
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d10d      	bne.n	800283a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b95      	ldr	r3, [pc, #596]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8098 	beq.w	800295c <HAL_RCC_OscConfig+0x184>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 8093 	bne.w	800295c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3cb      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x7a>
 8002844:	4b8b      	ldr	r3, [pc, #556]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a8a      	ldr	r2, [pc, #552]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e058      	b.n	8002904 <HAL_RCC_OscConfig+0x12c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d112      	bne.n	8002880 <HAL_RCC_OscConfig+0xa8>
 800285a:	4b86      	ldr	r3, [pc, #536]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a85      	ldr	r2, [pc, #532]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b83      	ldr	r3, [pc, #524]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a82      	ldr	r2, [pc, #520]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800286c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7f      	ldr	r2, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e041      	b.n	8002904 <HAL_RCC_OscConfig+0x12c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0xd8>
 800288a:	4b7a      	ldr	r3, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a79      	ldr	r2, [pc, #484]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a76      	ldr	r2, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800289c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e029      	b.n	8002904 <HAL_RCC_OscConfig+0x12c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80028b8:	d112      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
 80028ba:	4b6e      	ldr	r3, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6d      	ldr	r2, [pc, #436]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e011      	b.n	8002904 <HAL_RCC_OscConfig+0x12c>
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a63      	ldr	r2, [pc, #396]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b5e      	ldr	r3, [pc, #376]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80028fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fad8 	bl	8000ec0 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fad4 	bl	8000ec0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e355      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x13c>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fac4 	bl	8000ec0 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fac0 	bl	8000ec0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e341      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x164>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 808c 	beq.w	8002a84 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002974:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002976:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_RCC_OscConfig+0x1ba>
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2b18      	cmp	r3, #24
 8002986:	d137      	bne.n	80029f8 <HAL_RCC_OscConfig+0x220>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d132      	bne.n	80029f8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x1d2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e313      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 0219 	bic.w	r2, r3, #25
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	492f      	ldr	r1, [pc, #188]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029bc:	f7fe fa80 	bl	8000ec0 <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe fa7c 	bl	8000ec0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e2fd      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	061b      	lsls	r3, r3, #24
 80029f0:	4920      	ldr	r1, [pc, #128]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f6:	e045      	b.n	8002a84 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d026      	beq.n	8002a4e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0219 	bic.w	r2, r3, #25
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4919      	ldr	r1, [pc, #100]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe fa55 	bl	8000ec0 <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fa51 	bl	8000ec0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e2d2      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	490b      	ldr	r1, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e01a      	b.n	8002a84 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fa31 	bl	8000ec0 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fe fa2d 	bl	8000ec0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d903      	bls.n	8002a78 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e2ae      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
 8002a74:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a78:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d06a      	beq.n	8002b66 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a90:	4b93      	ldr	r3, [pc, #588]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d007      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2de>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b18      	cmp	r3, #24
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x30c>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ab6:	4b8a      	ldr	r3, [pc, #552]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x2f6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e281      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ace:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	4980      	ldr	r1, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae2:	e040      	b.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aec:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7b      	ldr	r2, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe f9e2 	bl	8000ec0 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b00:	f7fe f9de 	bl	8000ec0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e25f      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b12:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1e:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	496c      	ldr	r1, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
 8002b32:	e018      	b.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b34:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe f9be 	bl	8000ec0 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b48:	f7fe f9ba 	bl	8000ec0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e23b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d036      	beq.n	8002be0 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d019      	beq.n	8002bae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe f99b 	bl	8000ec0 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe f997 	bl	8000ec0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e218      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3b6>
 8002bac:	e018      	b.n	8002be0 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb2:	4a4b      	ldr	r2, [pc, #300]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe f981 	bl	8000ec0 <HAL_GetTick>
 8002bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe f97d 	bl	8000ec0 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1fe      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd4:	4b42      	ldr	r3, [pc, #264]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d036      	beq.n	8002c5a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d019      	beq.n	8002c28 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c00:	f7fe f95e 	bl	8000ec0 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c08:	f7fe f95a 	bl	8000ec0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1db      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x430>
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c34:	f7fe f944 	bl	8000ec0 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c3c:	f7fe f940 	bl	8000ec0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1c1      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80af 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_RCC_OscConfig+0x50c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x50c>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c74:	f7fe f924 	bl	8000ec0 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe f920 	bl	8000ec0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1a1      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_RCC_OscConfig+0x50c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
 8002cae:	e05b      	b.n	8002d68 <HAL_RCC_OscConfig+0x590>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d117      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x510>
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e044      	b.n	8002d68 <HAL_RCC_OscConfig+0x590>
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58024800 	.word	0x58024800
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d112      	bne.n	8002d16 <HAL_RCC_OscConfig+0x53e>
 8002cf0:	4b95      	ldr	r3, [pc, #596]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a94      	ldr	r2, [pc, #592]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a91      	ldr	r2, [pc, #580]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a8e      	ldr	r2, [pc, #568]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e028      	b.n	8002d68 <HAL_RCC_OscConfig+0x590>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b85      	cmp	r3, #133	; 0x85
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_OscConfig+0x56c>
 8002d1e:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a89      	ldr	r2, [pc, #548]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a86      	ldr	r2, [pc, #536]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	4b84      	ldr	r3, [pc, #528]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a83      	ldr	r2, [pc, #524]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	e011      	b.n	8002d68 <HAL_RCC_OscConfig+0x590>
 8002d44:	4b80      	ldr	r3, [pc, #512]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a7f      	ldr	r2, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d56:	f023 0304 	bic.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a79      	ldr	r2, [pc, #484]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f8a6 	bl	8000ec0 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe f8a2 	bl	8000ec0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e121      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <HAL_RCC_OscConfig+0x5a0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe f890 	bl	8000ec0 <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe f88c 	bl	8000ec0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e10b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8100 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dd0:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd8:	2b18      	cmp	r3, #24
 8002dda:	f000 80bb 	beq.w	8002f54 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	f040 8095 	bne.w	8002f12 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	4b57      	ldr	r3, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a56      	ldr	r2, [pc, #344]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe f864 	bl	8000ec0 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe f860 	bl	8000ec0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0e1      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_RCC_OscConfig+0x774>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	4946      	ldr	r1, [pc, #280]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	628b      	str	r3, [r1, #40]	; 0x28
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	3b01      	subs	r3, #1
 8002e44:	025b      	lsls	r3, r3, #9
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e64:	4938      	ldr	r1, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	4a36      	ldr	r2, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7a:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e82:	00d2      	lsls	r2, r2, #3
 8002e84:	4930      	ldr	r1, [pc, #192]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	f023 020c 	bic.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	492c      	ldr	r1, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	f023 0202 	bic.w	r2, r3, #2
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	4927      	ldr	r1, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7fd ffe9 	bl	8000ec0 <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fd ffe5 	bl	8000ec0 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e066      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x71a>
 8002f10:	e05e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fd ffcf 	bl	8000ec0 <HAL_GetTick>
 8002f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fd ffcb 	bl	8000ec0 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e04c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x74e>
 8002f44:	e044      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
 8002f46:	bf00      	nop
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	fffffc0c 	.word	0xfffffc0c
 8002f50:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_RCC_OscConfig+0x804>)
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_OscConfig+0x804>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d031      	beq.n	8002fcc <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d12a      	bne.n	8002fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d122      	bne.n	8002fcc <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d11a      	bne.n	8002fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0a5b      	lsrs	r3, r3, #9
 8002f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d111      	bne.n	8002fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	0e1b      	lsrs	r3, r3, #24
 8002fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3730      	adds	r7, #48	; 0x30
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	58024400 	.word	0x58024400

08002fe0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e19c      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b8a      	ldr	r3, [pc, #552]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d910      	bls.n	8003024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b87      	ldr	r3, [pc, #540]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 020f 	bic.w	r2, r3, #15
 800300a:	4985      	ldr	r1, [pc, #532]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b83      	ldr	r3, [pc, #524]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e184      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	4b7b      	ldr	r3, [pc, #492]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303c:	429a      	cmp	r2, r3
 800303e:	d908      	bls.n	8003052 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003040:	4b78      	ldr	r3, [pc, #480]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	4975      	ldr	r1, [pc, #468]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 800304e:	4313      	orrs	r3, r2
 8003050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d010      	beq.n	8003080 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	4b70      	ldr	r3, [pc, #448]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800306a:	429a      	cmp	r2, r3
 800306c:	d908      	bls.n	8003080 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	496a      	ldr	r1, [pc, #424]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 800307c:	4313      	orrs	r3, r2
 800307e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d010      	beq.n	80030ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	4b64      	ldr	r3, [pc, #400]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003098:	429a      	cmp	r2, r3
 800309a:	d908      	bls.n	80030ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800309c:	4b61      	ldr	r3, [pc, #388]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	495e      	ldr	r1, [pc, #376]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d908      	bls.n	80030dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030ca:	4b56      	ldr	r3, [pc, #344]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4953      	ldr	r1, [pc, #332]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d908      	bls.n	800310a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f023 020f 	bic.w	r2, r3, #15
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4947      	ldr	r1, [pc, #284]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003106:	4313      	orrs	r3, r2
 8003108:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d055      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4940      	ldr	r1, [pc, #256]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d107      	bne.n	8003140 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003130:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d121      	bne.n	8003180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0f6      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d115      	bne.n	8003180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0ea      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0de      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003170:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0d6      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f023 0207 	bic.w	r2, r3, #7
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4925      	ldr	r1, [pc, #148]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fd fe95 	bl	8000ec0 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fd fe91 	bl	8000ec0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0be      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b0:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	429a      	cmp	r2, r3
 80031c0:	d1eb      	bne.n	800319a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	429a      	cmp	r2, r3
 80031dc:	d208      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d214      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 020f 	bic.w	r2, r3, #15
 8003206:	4906      	ldr	r1, [pc, #24]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RCC_ClockConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e086      	b.n	800332e <HAL_RCC_ClockConfig+0x34e>
 8003220:	52002000 	.word	0x52002000
 8003224:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003240:	429a      	cmp	r2, r3
 8003242:	d208      	bcs.n	8003256 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003244:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	4939      	ldr	r1, [pc, #228]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003252:	4313      	orrs	r3, r2
 8003254:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	4b34      	ldr	r3, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800326e:	429a      	cmp	r2, r3
 8003270:	d208      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	492e      	ldr	r1, [pc, #184]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003280:	4313      	orrs	r3, r2
 8003282:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800329c:	429a      	cmp	r2, r3
 800329e:	d208      	bcs.n	80032b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4922      	ldr	r1, [pc, #136]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d208      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4917      	ldr	r1, [pc, #92]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80032e0:	f000 f834 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4912      	ldr	r1, [pc, #72]	; (800333c <HAL_RCC_ClockConfig+0x35c>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x358>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	4a0d      	ldr	r2, [pc, #52]	; (800333c <HAL_RCC_ClockConfig+0x35c>)
 8003308:	5cd3      	ldrb	r3, [r2, r3]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_RCC_ClockConfig+0x360>)
 8003316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <HAL_RCC_ClockConfig+0x364>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x368>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fd82 	bl	8000e2c <HAL_InitTick>
 8003328:	4603      	mov	r3, r0
 800332a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	58024400 	.word	0x58024400
 800333c:	080060f8 	.word	0x080060f8
 8003340:	24000004 	.word	0x24000004
 8003344:	24000000 	.word	0x24000000
 8003348:	24000008 	.word	0x24000008

0800334c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003352:	4bb3      	ldr	r3, [pc, #716]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800335a:	2b18      	cmp	r3, #24
 800335c:	f200 8155 	bhi.w	800360a <HAL_RCC_GetSysClockFreq+0x2be>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	080033cd 	.word	0x080033cd
 800336c:	0800360b 	.word	0x0800360b
 8003370:	0800360b 	.word	0x0800360b
 8003374:	0800360b 	.word	0x0800360b
 8003378:	0800360b 	.word	0x0800360b
 800337c:	0800360b 	.word	0x0800360b
 8003380:	0800360b 	.word	0x0800360b
 8003384:	0800360b 	.word	0x0800360b
 8003388:	080033f3 	.word	0x080033f3
 800338c:	0800360b 	.word	0x0800360b
 8003390:	0800360b 	.word	0x0800360b
 8003394:	0800360b 	.word	0x0800360b
 8003398:	0800360b 	.word	0x0800360b
 800339c:	0800360b 	.word	0x0800360b
 80033a0:	0800360b 	.word	0x0800360b
 80033a4:	0800360b 	.word	0x0800360b
 80033a8:	080033f9 	.word	0x080033f9
 80033ac:	0800360b 	.word	0x0800360b
 80033b0:	0800360b 	.word	0x0800360b
 80033b4:	0800360b 	.word	0x0800360b
 80033b8:	0800360b 	.word	0x0800360b
 80033bc:	0800360b 	.word	0x0800360b
 80033c0:	0800360b 	.word	0x0800360b
 80033c4:	0800360b 	.word	0x0800360b
 80033c8:	080033ff 	.word	0x080033ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033cc:	4b94      	ldr	r3, [pc, #592]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033d8:	4b91      	ldr	r3, [pc, #580]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	4a90      	ldr	r2, [pc, #576]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033ea:	e111      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033ec:	4b8d      	ldr	r3, [pc, #564]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ee:	61bb      	str	r3, [r7, #24]
    break;
 80033f0:	e10e      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033f2:	4b8d      	ldr	r3, [pc, #564]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f4:	61bb      	str	r3, [r7, #24]
    break;
 80033f6:	e10b      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033f8:	4b8c      	ldr	r3, [pc, #560]	; (800362c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033fa:	61bb      	str	r3, [r7, #24]
    break;
 80033fc:	e108      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003408:	4b85      	ldr	r3, [pc, #532]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003412:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003414:	4b82      	ldr	r3, [pc, #520]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800341e:	4b80      	ldr	r3, [pc, #512]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	08db      	lsrs	r3, r3, #3
 8003424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80e1 	beq.w	8003604 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b02      	cmp	r3, #2
 8003446:	f000 8083 	beq.w	8003550 <HAL_RCC_GetSysClockFreq+0x204>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b02      	cmp	r3, #2
 800344e:	f200 80a1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x248>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x114>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d056      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x1c0>
 800345e:	e099      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003460:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02d      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800346c:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	08db      	lsrs	r3, r3, #3
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034c6:	e087      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003634 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b51      	ldr	r3, [pc, #324]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800350a:	e065      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003638 <HAL_RCC_GetSysClockFreq+0x2ec>
 800351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003532:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800354e:	e043      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800363c <HAL_RCC_GetSysClockFreq+0x2f0>
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b2f      	ldr	r3, [pc, #188]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003572:	ed97 6a02 	vldr	s12, [r7, #8]
 8003576:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003592:	e021      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003638 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e2:	3301      	adds	r3, #1
 80035e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003602:	e005      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    break;
 8003608:	e002      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800360c:	61bb      	str	r3, [r7, #24]
    break;
 800360e:	bf00      	nop
  }

  return sysclockfreq;
 8003610:	69bb      	ldr	r3, [r7, #24]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	58024400 	.word	0x58024400
 8003624:	03d09000 	.word	0x03d09000
 8003628:	003d0900 	.word	0x003d0900
 800362c:	016e3600 	.word	0x016e3600
 8003630:	46000000 	.word	0x46000000
 8003634:	4c742400 	.word	0x4c742400
 8003638:	4a742400 	.word	0x4a742400
 800363c:	4bb71b00 	.word	0x4bb71b00

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003646:	f7ff fe81 	bl	800334c <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_GetHCLKFreq+0x50>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490f      	ldr	r1, [pc, #60]	; (8003694 <HAL_RCC_GetHCLKFreq+0x54>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_GetHCLKFreq+0x50>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_GetHCLKFreq+0x54>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <HAL_RCC_GetHCLKFreq+0x58>)
 800367c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800367e:	4a07      	ldr	r2, [pc, #28]	; (800369c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCC_GetHCLKFreq+0x58>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	58024400 	.word	0x58024400
 8003694:	080060f8 	.word	0x080060f8
 8003698:	24000004 	.word	0x24000004
 800369c:	24000000 	.word	0x24000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80036a4:	f7ff ffcc 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4904      	ldr	r1, [pc, #16]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	58024400 	.word	0x58024400
 80036c8:	080060f8 	.word	0x080060f8

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80036d0:	f7ff ffb6 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4904      	ldr	r1, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	58024400 	.word	0x58024400
 80036f4:	080060f8 	.word	0x080060f8

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003704:	2300      	movs	r3, #0
 8003706:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03f      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003718:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800371c:	d02a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800371e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003722:	d824      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003728:	d018      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800372a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372e:	d81e      	bhi.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003738:	d007      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800373a:	e018      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373c:	4ba6      	ldr	r3, [pc, #664]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	4aa5      	ldr	r2, [pc, #660]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003748:	e015      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2102      	movs	r1, #2
 8003750:	4618      	mov	r0, r3
 8003752:	f001 f99b 	bl	8004a8c <RCCEx_PLL2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800375a:	e00c      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3324      	adds	r3, #36	; 0x24
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fa44 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800376c:	e003      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
      break;
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800377c:	4b96      	ldr	r3, [pc, #600]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003788:	4993      	ldr	r1, [pc, #588]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800378a:	4313      	orrs	r3, r2
 800378c:	650b      	str	r3, [r1, #80]	; 0x50
 800378e:	e001      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03d      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d826      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037c5 	.word	0x080037c5
 80037b4:	080037d3 	.word	0x080037d3
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037fd 	.word	0x080037fd
 80037c0:	080037fd 	.word	0x080037fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d0:	e015      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f957 	bl	8004a8c <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037e2:	e00c      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3324      	adds	r3, #36	; 0x24
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fa00 	bl	8004bf0 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003804:	4b74      	ldr	r3, [pc, #464]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	f023 0207 	bic.w	r2, r3, #7
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	4971      	ldr	r1, [pc, #452]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	650b      	str	r3, [r1, #80]	; 0x50
 8003816:	e001      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003830:	d031      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003832:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003836:	d82b      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d02d      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	d825      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003844:	2bc0      	cmp	r3, #192	; 0xc0
 8003846:	d02a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003848:	2bc0      	cmp	r3, #192	; 0xc0
 800384a:	d821      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d016      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d81d      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d007      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800385c:	e018      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385e:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800386a:	e019      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f90a 	bl	8004a8c <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800387c:	e010      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3324      	adds	r3, #36	; 0x24
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f9b3 	bl	8004bf0 <RCCEx_PLL3_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800388e:	e007      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
      break;
 8003894:	e004      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800389e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	4949      	ldr	r1, [pc, #292]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	650b      	str	r3, [r1, #80]	; 0x50
 80038b8:	e001      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04f      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038d2:	d036      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80038d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038d8:	d830      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d032      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80038e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e4:	d82a      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80038e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038ea:	d02e      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80038ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038f0:	d824      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80038f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f6:	d018      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x232>
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fc:	d81e      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003906:	d007      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003908:	e018      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003916:	e019      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f001 f8b4 	bl	8004a8c <RCCEx_PLL2_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003928:	e010      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3324      	adds	r3, #36	; 0x24
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f95d 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800393a:	e007      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
      break;
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	491e      	ldr	r1, [pc, #120]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	650b      	str	r3, [r1, #80]	; 0x50
 8003964:	e001      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d034      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	2b30      	cmp	r3, #48	; 0x30
 800397c:	d01c      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800397e:	2b30      	cmp	r3, #48	; 0x30
 8003980:	d817      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003982:	2b20      	cmp	r3, #32
 8003984:	d00c      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003986:	2b20      	cmp	r3, #32
 8003988:	d813      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800398e:	2b10      	cmp	r3, #16
 8003990:	d10f      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800399e:	e00e      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 f870 	bl	8004a8c <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80039b0:	e005      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
      break;
 80039b6:	e002      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80039bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	4901      	ldr	r1, [pc, #4]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039d6:	e003      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80039d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d047      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f4:	d030      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039fa:	d82a      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80039fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a00:	d02c      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a06:	d824      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d018      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a12:	d81e      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	d007      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003a1e:	e018      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a20:	4bb0      	ldr	r3, [pc, #704]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	4aaf      	ldr	r2, [pc, #700]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a2c:	e017      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 f829 	bl	8004a8c <RCCEx_PLL2_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a3e:	e00e      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3324      	adds	r3, #36	; 0x24
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 f8d2 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a50:	e005      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003a58:	bf00      	nop
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a64:	4b9f      	ldr	r3, [pc, #636]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	499c      	ldr	r1, [pc, #624]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	650b      	str	r3, [r1, #80]	; 0x50
 8003a76:	e001      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d049      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a90:	d02e      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a96:	d828      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a9c:	d02a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa2:	d822      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aa8:	d026      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aae:	d81c      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab4:	d010      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aba:	d816      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01d      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d111      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 ffdd 	bl	8004a8c <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ad6:	e012      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3324      	adds	r3, #36	; 0x24
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f886 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ae8:	e009      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
      break;
 8003aee:	e006      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003af0:	bf00      	nop
 8003af2:	e004      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b04:	4b77      	ldr	r3, [pc, #476]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b10:	4974      	ldr	r1, [pc, #464]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	650b      	str	r3, [r1, #80]	; 0x50
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d053      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b2e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003b32:	d034      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b34:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003b38:	d82e      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3e:	d030      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b44:	d828      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d822      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b56:	d028      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003b58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b5c:	d81c      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d010      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b68:	d816      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01f      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b72:	d111      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 ff86 	bl	8004a8c <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b84:	e014      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3324      	adds	r3, #36	; 0x24
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 f82f 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e004      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bc4:	4947      	ldr	r1, [pc, #284]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02f      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be4:	d00e      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bea:	d814      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c02:	e00c      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 ff3e 	bl	8004a8c <RCCEx_PLL2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c24:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	492c      	ldr	r1, [pc, #176]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	650b      	str	r3, [r1, #80]	; 0x50
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d032      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d81b      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c69 	.word	0x08003c69
 8003c60:	08003c77 	.word	0x08003c77
 8003c64:	08003c8f 	.word	0x08003c8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c68:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c74:	e00c      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 ff05 	bl	8004a8c <RCCEx_PLL2_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ca8:	e001      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 808a 	beq.w	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd f8fa 	bl	8000ec0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cce:	e00d      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd0:	f7fd f8f6 	bl	8000ec0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d906      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ce2:	e009      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cec:	4bba      	ldr	r3, [pc, #744]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0eb      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d166      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cfe:	4bb7      	ldr	r3, [pc, #732]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d08:	4053      	eors	r3, r2
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d12:	4bb2      	ldr	r3, [pc, #712]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d1c:	4baf      	ldr	r3, [pc, #700]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4aae      	ldr	r2, [pc, #696]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d28:	4bac      	ldr	r3, [pc, #688]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4aab      	ldr	r2, [pc, #684]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d34:	4aa9      	ldr	r2, [pc, #676]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d44:	d115      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd f8bb 	bl	8000ec0 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fd f8b7 	bl	8000ec0 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d902      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	75fb      	strb	r3, [r7, #23]
            break;
 8003d64:	e005      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d66:	4b9d      	ldr	r3, [pc, #628]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0ed      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d126      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d86:	d10d      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003d88:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d96:	0919      	lsrs	r1, r3, #4
 8003d98:	4b91      	ldr	r3, [pc, #580]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	498f      	ldr	r1, [pc, #572]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	610b      	str	r3, [r1, #16]
 8003da2:	e005      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003da4:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	4a8c      	ldr	r2, [pc, #560]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003daa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dae:	6113      	str	r3, [r2, #16]
 8003db0:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	4987      	ldr	r1, [pc, #540]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	670b      	str	r3, [r1, #112]	; 0x70
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	75bb      	strb	r3, [r7, #22]
 8003dca:	e001      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d07f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de2:	2b28      	cmp	r3, #40	; 0x28
 8003de4:	d866      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003ebb 	.word	0x08003ebb
 8003df0:	08003eb5 	.word	0x08003eb5
 8003df4:	08003eb5 	.word	0x08003eb5
 8003df8:	08003eb5 	.word	0x08003eb5
 8003dfc:	08003eb5 	.word	0x08003eb5
 8003e00:	08003eb5 	.word	0x08003eb5
 8003e04:	08003eb5 	.word	0x08003eb5
 8003e08:	08003eb5 	.word	0x08003eb5
 8003e0c:	08003e91 	.word	0x08003e91
 8003e10:	08003eb5 	.word	0x08003eb5
 8003e14:	08003eb5 	.word	0x08003eb5
 8003e18:	08003eb5 	.word	0x08003eb5
 8003e1c:	08003eb5 	.word	0x08003eb5
 8003e20:	08003eb5 	.word	0x08003eb5
 8003e24:	08003eb5 	.word	0x08003eb5
 8003e28:	08003eb5 	.word	0x08003eb5
 8003e2c:	08003ea3 	.word	0x08003ea3
 8003e30:	08003eb5 	.word	0x08003eb5
 8003e34:	08003eb5 	.word	0x08003eb5
 8003e38:	08003eb5 	.word	0x08003eb5
 8003e3c:	08003eb5 	.word	0x08003eb5
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	08003eb5 	.word	0x08003eb5
 8003e48:	08003eb5 	.word	0x08003eb5
 8003e4c:	08003ebb 	.word	0x08003ebb
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	08003eb5 	.word	0x08003eb5
 8003e58:	08003eb5 	.word	0x08003eb5
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	08003eb5 	.word	0x08003eb5
 8003e6c:	08003ebb 	.word	0x08003ebb
 8003e70:	08003eb5 	.word	0x08003eb5
 8003e74:	08003eb5 	.word	0x08003eb5
 8003e78:	08003eb5 	.word	0x08003eb5
 8003e7c:	08003eb5 	.word	0x08003eb5
 8003e80:	08003eb5 	.word	0x08003eb5
 8003e84:	08003eb5 	.word	0x08003eb5
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	08003ebb 	.word	0x08003ebb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fdf8 	bl	8004a8c <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fea1 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ec2:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed0:	4942      	ldr	r1, [pc, #264]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d038      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d821      	bhi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f3b 	.word	0x08003f3b
 8003efc:	08003f11 	.word	0x08003f11
 8003f00:	08003f23 	.word	0x08003f23
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2101      	movs	r1, #1
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fdb8 	bl	8004a8c <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f20:	e00c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fe61 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f023 0207 	bic.w	r2, r3, #7
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	4923      	ldr	r1, [pc, #140]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	654b      	str	r3, [r1, #84]	; 0x54
 8003f54:	e001      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d040      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d821      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003fbb 	.word	0x08003fbb
 8003f7c:	08003f91 	.word	0x08003f91
 8003f80:	08003fa3 	.word	0x08003fa3
 8003f84:	08003fbb 	.word	0x08003fbb
 8003f88:	08003fbb 	.word	0x08003fbb
 8003f8c:	08003fbb 	.word	0x08003fbb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fd78 	bl	8004a8c <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fa0:	e00c      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	; 0x24
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fe21 	bl	8004bf0 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d110      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f023 0207 	bic.w	r2, r3, #7
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fd0:	4902      	ldr	r1, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003fd6:	e007      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003fd8:	58024800 	.word	0x58024800
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d04b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ffe:	d02e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004004:	d828      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d02a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d822      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004016:	d026      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004018:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800401c:	d81c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800401e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004022:	d010      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004028:	d816      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01d      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800402e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004032:	d111      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd26 	bl	8004a8c <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004044:	e012      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2102      	movs	r1, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fdcf 	bl	8004bf0 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800406a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004072:	4bb3      	ldr	r3, [pc, #716]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004080:	49af      	ldr	r1, [pc, #700]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004082:	4313      	orrs	r3, r2
 8004084:	654b      	str	r3, [r1, #84]	; 0x54
 8004086:	e001      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800409e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a2:	d02e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80040a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a8:	d828      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d02a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d822      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80040b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ba:	d026      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80040bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c0:	d81c      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c6:	d010      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040cc:	d816      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01d      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d111      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fcd4 	bl	8004a8c <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040e8:	e012      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fd7d 	bl	8004bf0 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800410e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004116:	4b8a      	ldr	r3, [pc, #552]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004124:	4986      	ldr	r1, [pc, #536]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004126:	4313      	orrs	r3, r2
 8004128:	658b      	str	r3, [r1, #88]	; 0x58
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d04b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004142:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004146:	d02e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004148:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800414c:	d828      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004152:	d02a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	d822      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800415a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800415e:	d026      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004160:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004164:	d81c      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416a:	d010      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800416c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004170:	d816      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417a:	d111      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc82 	bl	8004a8c <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800418c:	e012      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3324      	adds	r3, #36	; 0x24
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd2b 	bl	8004bf0 <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800419e:	e009      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80041b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041ba:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041c8:	495d      	ldr	r1, [pc, #372]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	658b      	str	r3, [r1, #88]	; 0x58
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d10a      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3324      	adds	r3, #36	; 0x24
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fcfc 	bl	8004bf0 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004202:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	494b      	ldr	r1, [pc, #300]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004212:	4313      	orrs	r3, r2
 8004214:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d10a      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fcdb 	bl	8004bf0 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004244:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004252:	493b      	ldr	r1, [pc, #236]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004254:	4313      	orrs	r3, r2
 8004256:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d034      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800426a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426e:	d01d      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004274:	d817      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004280:	e011      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fbff 	bl	8004a8c <RCCEx_PLL2_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004292:	e00c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fca8 	bl	8004bf0 <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042a4:	e003      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80042ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042c2:	491f      	ldr	r1, [pc, #124]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	658b      	str	r3, [r1, #88]	; 0x58
 80042c8:	e001      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d036      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e4:	d01c      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80042e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ea:	d816      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80042ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f0:	d003      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f6:	d007      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80042f8:	e00f      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004306:	e00c      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3324      	adds	r3, #36	; 0x24
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fc6e 	bl	8004bf0 <RCCEx_PLL3_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
      break;
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10d      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004336:	4902      	ldr	r1, [pc, #8]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004338:	4313      	orrs	r3, r2
 800433a:	654b      	str	r3, [r1, #84]	; 0x54
 800433c:	e004      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d029      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d007      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004362:	e00f      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004364:	4b69      	ldr	r3, [pc, #420]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a68      	ldr	r2, [pc, #416]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004370:	e00b      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	2102      	movs	r1, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fb87 	bl	8004a8c <RCCEx_PLL2_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004382:	e002      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
      break;
 8004388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004390:	4b5e      	ldr	r3, [pc, #376]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439c:	495b      	ldr	r1, [pc, #364]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043a2:	e001      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3324      	adds	r3, #36	; 0x24
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fc18 	bl	8004bf0 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d032      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d017      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d811      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d013      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d80b      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fc:	d106      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a42      	ldr	r2, [pc, #264]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800440a:	e007      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
      break;
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800441a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004422:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	4936      	ldr	r1, [pc, #216]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004432:	4313      	orrs	r3, r2
 8004434:	654b      	str	r3, [r1, #84]	; 0x54
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004448:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004454:	492d      	ldr	r1, [pc, #180]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004456:	4313      	orrs	r3, r2
 8004458:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004472:	4926      	ldr	r1, [pc, #152]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004474:	4313      	orrs	r3, r2
 8004476:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	491e      	ldr	r1, [pc, #120]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004492:	4313      	orrs	r3, r2
 8004494:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ac:	6113      	str	r3, [r2, #16]
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044b8:	4914      	ldr	r1, [pc, #80]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	da08      	bge.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	490e      	ldr	r1, [pc, #56]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	4906      	ldr	r1, [pc, #24]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80044f8:	7dbb      	ldrb	r3, [r7, #22]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	58024400 	.word	0x58024400

08004510 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004514:	f7ff f894 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4904      	ldr	r1, [pc, #16]	; (8004538 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	58024400 	.word	0x58024400
 8004538:	080060f8 	.word	0x080060f8

0800453c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004544:	4ba1      	ldr	r3, [pc, #644]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800454e:	4b9f      	ldr	r3, [pc, #636]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	0b1b      	lsrs	r3, r3, #12
 8004554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004558:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800455a:	4b9c      	ldr	r3, [pc, #624]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004566:	4b99      	ldr	r3, [pc, #612]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	08db      	lsrs	r3, r3, #3
 800456c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8111 	beq.w	80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	f000 8083 	beq.w	8004698 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f200 80a1 	bhi.w	80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d056      	beq.n	8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045a6:	e099      	b.n	80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d02d      	beq.n	8004610 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b4:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	08db      	lsrs	r3, r3, #3
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	4a84      	ldr	r2, [pc, #528]	; (80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b7b      	ldr	r3, [pc, #492]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800460e:	e087      	b.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a03 	vldr	s12, [r7, #12]
 8004636:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004652:	e065      	b.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004666:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a03 	vldr	s12, [r7, #12]
 800467a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004696:	e043      	b.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046aa:	4b48      	ldr	r3, [pc, #288]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80046be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046da:	e021      	b.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	0a5b      	lsrs	r3, r3, #9
 8004726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800473a:	edd7 6a07 	vldr	s13, [r7, #28]
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004746:	ee17 2a90 	vmov	r2, s15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800474e:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004768:	edd7 6a07 	vldr	s13, [r7, #28]
 800476c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004774:	ee17 2a90 	vmov	r2, s15
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004796:	edd7 6a07 	vldr	s13, [r7, #28]
 800479a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a2:	ee17 2a90 	vmov	r2, s15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047aa:	e008      	b.n	80047be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
}
 80047be:	bf00      	nop
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	58024400 	.word	0x58024400
 80047d0:	03d09000 	.word	0x03d09000
 80047d4:	46000000 	.word	0x46000000
 80047d8:	4c742400 	.word	0x4c742400
 80047dc:	4a742400 	.word	0x4a742400
 80047e0:	4bb71b00 	.word	0x4bb71b00

080047e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ec:	4ba1      	ldr	r3, [pc, #644]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047f6:	4b9f      	ldr	r3, [pc, #636]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	0d1b      	lsrs	r3, r3, #20
 80047fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004800:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004802:	4b9c      	ldr	r3, [pc, #624]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800480e:	4b99      	ldr	r3, [pc, #612]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8111 	beq.w	8004a54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b02      	cmp	r3, #2
 8004836:	f000 8083 	beq.w	8004940 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b02      	cmp	r3, #2
 800483e:	f200 80a1 	bhi.w	8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d056      	beq.n	80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800484e:	e099      	b.n	8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004850:	4b88      	ldr	r3, [pc, #544]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d02d      	beq.n	80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800485c:	4b85      	ldr	r3, [pc, #532]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	4a84      	ldr	r2, [pc, #528]	; (8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004886:	4b7b      	ldr	r3, [pc, #492]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004896:	ed97 6a03 	vldr	s12, [r7, #12]
 800489a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800489e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048b6:	e087      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ca:	4b6a      	ldr	r3, [pc, #424]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048da:	ed97 6a03 	vldr	s12, [r7, #12]
 80048de:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048fa:	e065      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800490a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490e:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004922:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800493e:	e043      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004952:	4b48      	ldr	r3, [pc, #288]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004962:	ed97 6a03 	vldr	s12, [r7, #12]
 8004966:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004982:	e021      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004996:	4b37      	ldr	r3, [pc, #220]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049c8:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	0a5b      	lsrs	r3, r3, #9
 80049ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ee:	ee17 2a90 	vmov	r2, s15
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	0c1b      	lsrs	r3, r3, #16
 80049fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1c:	ee17 2a90 	vmov	r2, s15
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4a:	ee17 2a90 	vmov	r2, s15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a52:	e008      	b.n	8004a66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
}
 8004a66:	bf00      	nop
 8004a68:	3724      	adds	r7, #36	; 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400
 8004a78:	03d09000 	.word	0x03d09000
 8004a7c:	46000000 	.word	0x46000000
 8004a80:	4c742400 	.word	0x4c742400
 8004a84:	4a742400 	.word	0x4a742400
 8004a88:	4bb71b00 	.word	0x4bb71b00

08004a8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a9a:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d101      	bne.n	8004aaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e099      	b.n	8004bde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004aaa:	4b4f      	ldr	r3, [pc, #316]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a4e      	ldr	r2, [pc, #312]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004ab0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab6:	f7fc fa03 	bl	8000ec0 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004abe:	f7fc f9ff 	bl	8000ec0 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e086      	b.n	8004bde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ad0:	4b45      	ldr	r3, [pc, #276]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004adc:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	493f      	ldr	r1, [pc, #252]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	628b      	str	r3, [r1, #40]	; 0x28
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	025b      	lsls	r3, r3, #9
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b20:	4931      	ldr	r1, [pc, #196]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	492d      	ldr	r1, [pc, #180]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f023 0220 	bic.w	r2, r3, #32
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	4928      	ldr	r1, [pc, #160]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b4a:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b50:	f023 0310 	bic.w	r3, r3, #16
 8004b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <RCCEx_PLL2_Config+0x160>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	69d2      	ldr	r2, [r2, #28]
 8004b62:	00d2      	lsls	r2, r2, #3
 8004b64:	4920      	ldr	r1, [pc, #128]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	f043 0310 	orr.w	r3, r3, #16
 8004b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b88:	e00f      	b.n	8004baa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b90:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b9c:	e005      	b.n	8004baa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb6:	f7fc f983 	bl	8000ec0 <HAL_GetTick>
 8004bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bbc:	e008      	b.n	8004bd0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bbe:	f7fc f97f 	bl	8000ec0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e006      	b.n	8004bde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <RCCEx_PLL2_Config+0x15c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	58024400 	.word	0x58024400
 8004bec:	ffff0007 	.word	0xffff0007

08004bf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bfe:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d101      	bne.n	8004c0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e099      	b.n	8004d42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c0e:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1a:	f7fc f951 	bl	8000ec0 <HAL_GetTick>
 8004c1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c20:	e008      	b.n	8004c34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c22:	f7fc f94d 	bl	8000ec0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e086      	b.n	8004d42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c34:	4b45      	ldr	r3, [pc, #276]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f0      	bne.n	8004c22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c40:	4b42      	ldr	r3, [pc, #264]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	051b      	lsls	r3, r3, #20
 8004c4e:	493f      	ldr	r1, [pc, #252]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	628b      	str	r3, [r1, #40]	; 0x28
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	025b      	lsls	r3, r3, #9
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	061b      	lsls	r3, r3, #24
 8004c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c84:	4931      	ldr	r1, [pc, #196]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	492d      	ldr	r1, [pc, #180]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4928      	ldr	r1, [pc, #160]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cae:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <RCCEx_PLL3_Config+0x160>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	69d2      	ldr	r2, [r2, #28]
 8004cc6:	00d2      	lsls	r2, r2, #3
 8004cc8:	4920      	ldr	r1, [pc, #128]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cce:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ce0:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cec:	e00f      	b.n	8004d0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d106      	bne.n	8004d02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d00:	e005      	b.n	8004d0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	4a11      	ldr	r2, [pc, #68]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a0e      	ldr	r2, [pc, #56]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1a:	f7fc f8d1 	bl	8000ec0 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d20:	e008      	b.n	8004d34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d22:	f7fc f8cd 	bl	8000ec0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e006      	b.n	8004d42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <RCCEx_PLL3_Config+0x15c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	ffff0007 	.word	0xffff0007

08004d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e042      	b.n	8004dec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fb ff8b 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2224      	movs	r2, #36	; 0x24
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f82c 	bl	8004df4 <UART_SetConfig>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e022      	b.n	8004dec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fe7e 	bl	8005ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 ff05 	bl	8005bf4 <UART_CheckIdleState>
 8004dea:	4603      	mov	r3, r0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4bbf      	ldr	r3, [pc, #764]	; (8005120 <UART_SetConfig+0x32c>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4ab5      	ldr	r2, [pc, #724]	; (8005124 <UART_SetConfig+0x330>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4bb0      	ldr	r3, [pc, #704]	; (8005128 <UART_SetConfig+0x334>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f023 010f 	bic.w	r1, r3, #15
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4aa7      	ldr	r2, [pc, #668]	; (800512c <UART_SetConfig+0x338>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d176      	bne.n	8004f80 <UART_SetConfig+0x18c>
 8004e92:	4ba7      	ldr	r3, [pc, #668]	; (8005130 <UART_SetConfig+0x33c>)
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9a:	2b28      	cmp	r3, #40	; 0x28
 8004e9c:	d86c      	bhi.n	8004f78 <UART_SetConfig+0x184>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0xb0>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004f49 	.word	0x08004f49
 8004ea8:	08004f79 	.word	0x08004f79
 8004eac:	08004f79 	.word	0x08004f79
 8004eb0:	08004f79 	.word	0x08004f79
 8004eb4:	08004f79 	.word	0x08004f79
 8004eb8:	08004f79 	.word	0x08004f79
 8004ebc:	08004f79 	.word	0x08004f79
 8004ec0:	08004f79 	.word	0x08004f79
 8004ec4:	08004f51 	.word	0x08004f51
 8004ec8:	08004f79 	.word	0x08004f79
 8004ecc:	08004f79 	.word	0x08004f79
 8004ed0:	08004f79 	.word	0x08004f79
 8004ed4:	08004f79 	.word	0x08004f79
 8004ed8:	08004f79 	.word	0x08004f79
 8004edc:	08004f79 	.word	0x08004f79
 8004ee0:	08004f79 	.word	0x08004f79
 8004ee4:	08004f59 	.word	0x08004f59
 8004ee8:	08004f79 	.word	0x08004f79
 8004eec:	08004f79 	.word	0x08004f79
 8004ef0:	08004f79 	.word	0x08004f79
 8004ef4:	08004f79 	.word	0x08004f79
 8004ef8:	08004f79 	.word	0x08004f79
 8004efc:	08004f79 	.word	0x08004f79
 8004f00:	08004f79 	.word	0x08004f79
 8004f04:	08004f61 	.word	0x08004f61
 8004f08:	08004f79 	.word	0x08004f79
 8004f0c:	08004f79 	.word	0x08004f79
 8004f10:	08004f79 	.word	0x08004f79
 8004f14:	08004f79 	.word	0x08004f79
 8004f18:	08004f79 	.word	0x08004f79
 8004f1c:	08004f79 	.word	0x08004f79
 8004f20:	08004f79 	.word	0x08004f79
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	08004f79 	.word	0x08004f79
 8004f2c:	08004f79 	.word	0x08004f79
 8004f30:	08004f79 	.word	0x08004f79
 8004f34:	08004f79 	.word	0x08004f79
 8004f38:	08004f79 	.word	0x08004f79
 8004f3c:	08004f79 	.word	0x08004f79
 8004f40:	08004f79 	.word	0x08004f79
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4e:	e326      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f56:	e322      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5e:	e31e      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f66:	e31a      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f68:	2320      	movs	r3, #32
 8004f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6e:	e316      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f70:	2340      	movs	r3, #64	; 0x40
 8004f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f76:	e312      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f7e:	e30e      	b.n	800559e <UART_SetConfig+0x7aa>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6b      	ldr	r2, [pc, #428]	; (8005134 <UART_SetConfig+0x340>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d130      	bne.n	8004fec <UART_SetConfig+0x1f8>
 8004f8a:	4b69      	ldr	r3, [pc, #420]	; (8005130 <UART_SetConfig+0x33c>)
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d826      	bhi.n	8004fe4 <UART_SetConfig+0x1f0>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x1a8>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fc5 	.word	0x08004fc5
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	e2f0      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc2:	e2ec      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fca:	e2e8      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e2e4      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e2e0      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e2dc      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fea:	e2d8      	b.n	800559e <UART_SetConfig+0x7aa>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a51      	ldr	r2, [pc, #324]	; (8005138 <UART_SetConfig+0x344>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d130      	bne.n	8005058 <UART_SetConfig+0x264>
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <UART_SetConfig+0x33c>)
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d826      	bhi.n	8005050 <UART_SetConfig+0x25c>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x214>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005021 	.word	0x08005021
 800500c:	08005029 	.word	0x08005029
 8005010:	08005031 	.word	0x08005031
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005026:	e2ba      	b.n	800559e <UART_SetConfig+0x7aa>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502e:	e2b6      	b.n	800559e <UART_SetConfig+0x7aa>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005036:	e2b2      	b.n	800559e <UART_SetConfig+0x7aa>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e2ae      	b.n	800559e <UART_SetConfig+0x7aa>
 8005040:	2320      	movs	r3, #32
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e2aa      	b.n	800559e <UART_SetConfig+0x7aa>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e2a6      	b.n	800559e <UART_SetConfig+0x7aa>
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e2a2      	b.n	800559e <UART_SetConfig+0x7aa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a37      	ldr	r2, [pc, #220]	; (800513c <UART_SetConfig+0x348>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d130      	bne.n	80050c4 <UART_SetConfig+0x2d0>
 8005062:	4b33      	ldr	r3, [pc, #204]	; (8005130 <UART_SetConfig+0x33c>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b05      	cmp	r3, #5
 800506c:	d826      	bhi.n	80050bc <UART_SetConfig+0x2c8>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x280>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	0800508d 	.word	0x0800508d
 8005078:	08005095 	.word	0x08005095
 800507c:	0800509d 	.word	0x0800509d
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005092:	e284      	b.n	800559e <UART_SetConfig+0x7aa>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509a:	e280      	b.n	800559e <UART_SetConfig+0x7aa>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a2:	e27c      	b.n	800559e <UART_SetConfig+0x7aa>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050aa:	e278      	b.n	800559e <UART_SetConfig+0x7aa>
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b2:	e274      	b.n	800559e <UART_SetConfig+0x7aa>
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e270      	b.n	800559e <UART_SetConfig+0x7aa>
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e26c      	b.n	800559e <UART_SetConfig+0x7aa>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	; (8005140 <UART_SetConfig+0x34c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d142      	bne.n	8005154 <UART_SetConfig+0x360>
 80050ce:	4b18      	ldr	r3, [pc, #96]	; (8005130 <UART_SetConfig+0x33c>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d838      	bhi.n	800514c <UART_SetConfig+0x358>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0x2ec>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005109 	.word	0x08005109
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005145 	.word	0x08005145
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e24e      	b.n	800559e <UART_SetConfig+0x7aa>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e24a      	b.n	800559e <UART_SetConfig+0x7aa>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510e:	e246      	b.n	800559e <UART_SetConfig+0x7aa>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005116:	e242      	b.n	800559e <UART_SetConfig+0x7aa>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511e:	e23e      	b.n	800559e <UART_SetConfig+0x7aa>
 8005120:	cfff69f3 	.word	0xcfff69f3
 8005124:	58000c00 	.word	0x58000c00
 8005128:	11fff4ff 	.word	0x11fff4ff
 800512c:	40011000 	.word	0x40011000
 8005130:	58024400 	.word	0x58024400
 8005134:	40004400 	.word	0x40004400
 8005138:	40004800 	.word	0x40004800
 800513c:	40004c00 	.word	0x40004c00
 8005140:	40005000 	.word	0x40005000
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514a:	e228      	b.n	800559e <UART_SetConfig+0x7aa>
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005152:	e224      	b.n	800559e <UART_SetConfig+0x7aa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4ab1      	ldr	r2, [pc, #708]	; (8005420 <UART_SetConfig+0x62c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d176      	bne.n	800524c <UART_SetConfig+0x458>
 800515e:	4bb1      	ldr	r3, [pc, #708]	; (8005424 <UART_SetConfig+0x630>)
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005166:	2b28      	cmp	r3, #40	; 0x28
 8005168:	d86c      	bhi.n	8005244 <UART_SetConfig+0x450>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0x37c>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005215 	.word	0x08005215
 8005174:	08005245 	.word	0x08005245
 8005178:	08005245 	.word	0x08005245
 800517c:	08005245 	.word	0x08005245
 8005180:	08005245 	.word	0x08005245
 8005184:	08005245 	.word	0x08005245
 8005188:	08005245 	.word	0x08005245
 800518c:	08005245 	.word	0x08005245
 8005190:	0800521d 	.word	0x0800521d
 8005194:	08005245 	.word	0x08005245
 8005198:	08005245 	.word	0x08005245
 800519c:	08005245 	.word	0x08005245
 80051a0:	08005245 	.word	0x08005245
 80051a4:	08005245 	.word	0x08005245
 80051a8:	08005245 	.word	0x08005245
 80051ac:	08005245 	.word	0x08005245
 80051b0:	08005225 	.word	0x08005225
 80051b4:	08005245 	.word	0x08005245
 80051b8:	08005245 	.word	0x08005245
 80051bc:	08005245 	.word	0x08005245
 80051c0:	08005245 	.word	0x08005245
 80051c4:	08005245 	.word	0x08005245
 80051c8:	08005245 	.word	0x08005245
 80051cc:	08005245 	.word	0x08005245
 80051d0:	0800522d 	.word	0x0800522d
 80051d4:	08005245 	.word	0x08005245
 80051d8:	08005245 	.word	0x08005245
 80051dc:	08005245 	.word	0x08005245
 80051e0:	08005245 	.word	0x08005245
 80051e4:	08005245 	.word	0x08005245
 80051e8:	08005245 	.word	0x08005245
 80051ec:	08005245 	.word	0x08005245
 80051f0:	08005235 	.word	0x08005235
 80051f4:	08005245 	.word	0x08005245
 80051f8:	08005245 	.word	0x08005245
 80051fc:	08005245 	.word	0x08005245
 8005200:	08005245 	.word	0x08005245
 8005204:	08005245 	.word	0x08005245
 8005208:	08005245 	.word	0x08005245
 800520c:	08005245 	.word	0x08005245
 8005210:	0800523d 	.word	0x0800523d
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521a:	e1c0      	b.n	800559e <UART_SetConfig+0x7aa>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005222:	e1bc      	b.n	800559e <UART_SetConfig+0x7aa>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522a:	e1b8      	b.n	800559e <UART_SetConfig+0x7aa>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005232:	e1b4      	b.n	800559e <UART_SetConfig+0x7aa>
 8005234:	2320      	movs	r3, #32
 8005236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523a:	e1b0      	b.n	800559e <UART_SetConfig+0x7aa>
 800523c:	2340      	movs	r3, #64	; 0x40
 800523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005242:	e1ac      	b.n	800559e <UART_SetConfig+0x7aa>
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	e1a8      	b.n	800559e <UART_SetConfig+0x7aa>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a75      	ldr	r2, [pc, #468]	; (8005428 <UART_SetConfig+0x634>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d130      	bne.n	80052b8 <UART_SetConfig+0x4c4>
 8005256:	4b73      	ldr	r3, [pc, #460]	; (8005424 <UART_SetConfig+0x630>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b05      	cmp	r3, #5
 8005260:	d826      	bhi.n	80052b0 <UART_SetConfig+0x4bc>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x474>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005281 	.word	0x08005281
 800526c:	08005289 	.word	0x08005289
 8005270:	08005291 	.word	0x08005291
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005286:	e18a      	b.n	800559e <UART_SetConfig+0x7aa>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528e:	e186      	b.n	800559e <UART_SetConfig+0x7aa>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005296:	e182      	b.n	800559e <UART_SetConfig+0x7aa>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529e:	e17e      	b.n	800559e <UART_SetConfig+0x7aa>
 80052a0:	2320      	movs	r3, #32
 80052a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a6:	e17a      	b.n	800559e <UART_SetConfig+0x7aa>
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ae:	e176      	b.n	800559e <UART_SetConfig+0x7aa>
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b6:	e172      	b.n	800559e <UART_SetConfig+0x7aa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5b      	ldr	r2, [pc, #364]	; (800542c <UART_SetConfig+0x638>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d130      	bne.n	8005324 <UART_SetConfig+0x530>
 80052c2:	4b58      	ldr	r3, [pc, #352]	; (8005424 <UART_SetConfig+0x630>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d826      	bhi.n	800531c <UART_SetConfig+0x528>
 80052ce:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <UART_SetConfig+0x4e0>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052ed 	.word	0x080052ed
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f2:	e154      	b.n	800559e <UART_SetConfig+0x7aa>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fa:	e150      	b.n	800559e <UART_SetConfig+0x7aa>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005302:	e14c      	b.n	800559e <UART_SetConfig+0x7aa>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530a:	e148      	b.n	800559e <UART_SetConfig+0x7aa>
 800530c:	2320      	movs	r3, #32
 800530e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005312:	e144      	b.n	800559e <UART_SetConfig+0x7aa>
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531a:	e140      	b.n	800559e <UART_SetConfig+0x7aa>
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005322:	e13c      	b.n	800559e <UART_SetConfig+0x7aa>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a41      	ldr	r2, [pc, #260]	; (8005430 <UART_SetConfig+0x63c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	f040 8082 	bne.w	8005434 <UART_SetConfig+0x640>
 8005330:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <UART_SetConfig+0x630>)
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005338:	2b28      	cmp	r3, #40	; 0x28
 800533a:	d86d      	bhi.n	8005418 <UART_SetConfig+0x624>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x550>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	080053e9 	.word	0x080053e9
 8005348:	08005419 	.word	0x08005419
 800534c:	08005419 	.word	0x08005419
 8005350:	08005419 	.word	0x08005419
 8005354:	08005419 	.word	0x08005419
 8005358:	08005419 	.word	0x08005419
 800535c:	08005419 	.word	0x08005419
 8005360:	08005419 	.word	0x08005419
 8005364:	080053f1 	.word	0x080053f1
 8005368:	08005419 	.word	0x08005419
 800536c:	08005419 	.word	0x08005419
 8005370:	08005419 	.word	0x08005419
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	080053f9 	.word	0x080053f9
 8005388:	08005419 	.word	0x08005419
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005401 	.word	0x08005401
 80053a8:	08005419 	.word	0x08005419
 80053ac:	08005419 	.word	0x08005419
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	08005419 	.word	0x08005419
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005409 	.word	0x08005409
 80053c8:	08005419 	.word	0x08005419
 80053cc:	08005419 	.word	0x08005419
 80053d0:	08005419 	.word	0x08005419
 80053d4:	08005419 	.word	0x08005419
 80053d8:	08005419 	.word	0x08005419
 80053dc:	08005419 	.word	0x08005419
 80053e0:	08005419 	.word	0x08005419
 80053e4:	08005411 	.word	0x08005411
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ee:	e0d6      	b.n	800559e <UART_SetConfig+0x7aa>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e0d2      	b.n	800559e <UART_SetConfig+0x7aa>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e0ce      	b.n	800559e <UART_SetConfig+0x7aa>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005406:	e0ca      	b.n	800559e <UART_SetConfig+0x7aa>
 8005408:	2320      	movs	r3, #32
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540e:	e0c6      	b.n	800559e <UART_SetConfig+0x7aa>
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005416:	e0c2      	b.n	800559e <UART_SetConfig+0x7aa>
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541e:	e0be      	b.n	800559e <UART_SetConfig+0x7aa>
 8005420:	40011400 	.word	0x40011400
 8005424:	58024400 	.word	0x58024400
 8005428:	40007800 	.word	0x40007800
 800542c:	40007c00 	.word	0x40007c00
 8005430:	40011800 	.word	0x40011800
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4aad      	ldr	r2, [pc, #692]	; (80056f0 <UART_SetConfig+0x8fc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d176      	bne.n	800552c <UART_SetConfig+0x738>
 800543e:	4bad      	ldr	r3, [pc, #692]	; (80056f4 <UART_SetConfig+0x900>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005446:	2b28      	cmp	r3, #40	; 0x28
 8005448:	d86c      	bhi.n	8005524 <UART_SetConfig+0x730>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x65c>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	080054f5 	.word	0x080054f5
 8005454:	08005525 	.word	0x08005525
 8005458:	08005525 	.word	0x08005525
 800545c:	08005525 	.word	0x08005525
 8005460:	08005525 	.word	0x08005525
 8005464:	08005525 	.word	0x08005525
 8005468:	08005525 	.word	0x08005525
 800546c:	08005525 	.word	0x08005525
 8005470:	080054fd 	.word	0x080054fd
 8005474:	08005525 	.word	0x08005525
 8005478:	08005525 	.word	0x08005525
 800547c:	08005525 	.word	0x08005525
 8005480:	08005525 	.word	0x08005525
 8005484:	08005525 	.word	0x08005525
 8005488:	08005525 	.word	0x08005525
 800548c:	08005525 	.word	0x08005525
 8005490:	08005505 	.word	0x08005505
 8005494:	08005525 	.word	0x08005525
 8005498:	08005525 	.word	0x08005525
 800549c:	08005525 	.word	0x08005525
 80054a0:	08005525 	.word	0x08005525
 80054a4:	08005525 	.word	0x08005525
 80054a8:	08005525 	.word	0x08005525
 80054ac:	08005525 	.word	0x08005525
 80054b0:	0800550d 	.word	0x0800550d
 80054b4:	08005525 	.word	0x08005525
 80054b8:	08005525 	.word	0x08005525
 80054bc:	08005525 	.word	0x08005525
 80054c0:	08005525 	.word	0x08005525
 80054c4:	08005525 	.word	0x08005525
 80054c8:	08005525 	.word	0x08005525
 80054cc:	08005525 	.word	0x08005525
 80054d0:	08005515 	.word	0x08005515
 80054d4:	08005525 	.word	0x08005525
 80054d8:	08005525 	.word	0x08005525
 80054dc:	08005525 	.word	0x08005525
 80054e0:	08005525 	.word	0x08005525
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005525 	.word	0x08005525
 80054ec:	08005525 	.word	0x08005525
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e050      	b.n	800559e <UART_SetConfig+0x7aa>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e04c      	b.n	800559e <UART_SetConfig+0x7aa>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e048      	b.n	800559e <UART_SetConfig+0x7aa>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e044      	b.n	800559e <UART_SetConfig+0x7aa>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e040      	b.n	800559e <UART_SetConfig+0x7aa>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e03c      	b.n	800559e <UART_SetConfig+0x7aa>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e038      	b.n	800559e <UART_SetConfig+0x7aa>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a71      	ldr	r2, [pc, #452]	; (80056f8 <UART_SetConfig+0x904>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x7a4>
 8005536:	4b6f      	ldr	r3, [pc, #444]	; (80056f4 <UART_SetConfig+0x900>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x79c>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x754>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2302      	movs	r3, #2
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e01a      	b.n	800559e <UART_SetConfig+0x7aa>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e016      	b.n	800559e <UART_SetConfig+0x7aa>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e012      	b.n	800559e <UART_SetConfig+0x7aa>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e00e      	b.n	800559e <UART_SetConfig+0x7aa>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e00a      	b.n	800559e <UART_SetConfig+0x7aa>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e006      	b.n	800559e <UART_SetConfig+0x7aa>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e002      	b.n	800559e <UART_SetConfig+0x7aa>
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a55      	ldr	r2, [pc, #340]	; (80056f8 <UART_SetConfig+0x904>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 80f0 	bne.w	800578a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	dc46      	bgt.n	8005640 <UART_SetConfig+0x84c>
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	db75      	blt.n	80056a2 <UART_SetConfig+0x8ae>
 80055b6:	3b02      	subs	r3, #2
 80055b8:	2b1e      	cmp	r3, #30
 80055ba:	d872      	bhi.n	80056a2 <UART_SetConfig+0x8ae>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x7d0>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	08005647 	.word	0x08005647
 80055c8:	080056a3 	.word	0x080056a3
 80055cc:	0800564f 	.word	0x0800564f
 80055d0:	080056a3 	.word	0x080056a3
 80055d4:	080056a3 	.word	0x080056a3
 80055d8:	080056a3 	.word	0x080056a3
 80055dc:	0800565f 	.word	0x0800565f
 80055e0:	080056a3 	.word	0x080056a3
 80055e4:	080056a3 	.word	0x080056a3
 80055e8:	080056a3 	.word	0x080056a3
 80055ec:	080056a3 	.word	0x080056a3
 80055f0:	080056a3 	.word	0x080056a3
 80055f4:	080056a3 	.word	0x080056a3
 80055f8:	080056a3 	.word	0x080056a3
 80055fc:	0800566f 	.word	0x0800566f
 8005600:	080056a3 	.word	0x080056a3
 8005604:	080056a3 	.word	0x080056a3
 8005608:	080056a3 	.word	0x080056a3
 800560c:	080056a3 	.word	0x080056a3
 8005610:	080056a3 	.word	0x080056a3
 8005614:	080056a3 	.word	0x080056a3
 8005618:	080056a3 	.word	0x080056a3
 800561c:	080056a3 	.word	0x080056a3
 8005620:	080056a3 	.word	0x080056a3
 8005624:	080056a3 	.word	0x080056a3
 8005628:	080056a3 	.word	0x080056a3
 800562c:	080056a3 	.word	0x080056a3
 8005630:	080056a3 	.word	0x080056a3
 8005634:	080056a3 	.word	0x080056a3
 8005638:	080056a3 	.word	0x080056a3
 800563c:	08005695 	.word	0x08005695
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d02a      	beq.n	800569a <UART_SetConfig+0x8a6>
 8005644:	e02d      	b.n	80056a2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005646:	f7fe ff63 	bl	8004510 <HAL_RCCEx_GetD3PCLK1Freq>
 800564a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800564c:	e02f      	b.n	80056ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe ff72 	bl	800453c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800565c:	e027      	b.n	80056ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800565e:	f107 0308 	add.w	r3, r7, #8
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff f8be 	bl	80047e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800566c:	e01f      	b.n	80056ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <UART_SetConfig+0x900>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <UART_SetConfig+0x900>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <UART_SetConfig+0x908>)
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800568c:	e00f      	b.n	80056ae <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <UART_SetConfig+0x908>)
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005692:	e00c      	b.n	80056ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005694:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <UART_SetConfig+0x90c>)
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005698:	e009      	b.n	80056ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056a0:	e005      	b.n	80056ae <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80056ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 81e6 	beq.w	8005a82 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <UART_SetConfig+0x910>)
 80056bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	4413      	add	r3, r2
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d305      	bcc.n	80056e6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d910      	bls.n	8005708 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80056ec:	e1c9      	b.n	8005a82 <UART_SetConfig+0xc8e>
 80056ee:	bf00      	nop
 80056f0:	40011c00 	.word	0x40011c00
 80056f4:	58024400 	.word	0x58024400
 80056f8:	58000c00 	.word	0x58000c00
 80056fc:	03d09000 	.word	0x03d09000
 8005700:	003d0900 	.word	0x003d0900
 8005704:	08006118 	.word	0x08006118
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	4618      	mov	r0, r3
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	4ac1      	ldr	r2, [pc, #772]	; (8005a1c <UART_SetConfig+0xc28>)
 8005716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571a:	b29a      	uxth	r2, r3
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	f7fa fde4 	bl	80002ec <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4610      	mov	r0, r2
 800572a:	4619      	mov	r1, r3
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	020b      	lsls	r3, r1, #8
 8005736:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800573a:	0202      	lsls	r2, r0, #8
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	6849      	ldr	r1, [r1, #4]
 8005740:	0849      	lsrs	r1, r1, #1
 8005742:	4608      	mov	r0, r1
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	1814      	adds	r4, r2, r0
 800574a:	eb43 0501 	adc.w	r5, r3, r1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	461a      	mov	r2, r3
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	4620      	mov	r0, r4
 800575a:	4629      	mov	r1, r5
 800575c:	f7fa fdc6 	bl	80002ec <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4613      	mov	r3, r2
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576e:	d308      	bcc.n	8005782 <UART_SetConfig+0x98e>
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005776:	d204      	bcs.n	8005782 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	e17f      	b.n	8005a82 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005788:	e17b      	b.n	8005a82 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005792:	f040 80bd 	bne.w	8005910 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8005796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800579a:	2b20      	cmp	r3, #32
 800579c:	dc48      	bgt.n	8005830 <UART_SetConfig+0xa3c>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	db7b      	blt.n	800589a <UART_SetConfig+0xaa6>
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d879      	bhi.n	800589a <UART_SetConfig+0xaa6>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x9b8>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	08005837 	.word	0x08005837
 80057b0:	0800583f 	.word	0x0800583f
 80057b4:	0800589b 	.word	0x0800589b
 80057b8:	0800589b 	.word	0x0800589b
 80057bc:	08005847 	.word	0x08005847
 80057c0:	0800589b 	.word	0x0800589b
 80057c4:	0800589b 	.word	0x0800589b
 80057c8:	0800589b 	.word	0x0800589b
 80057cc:	08005857 	.word	0x08005857
 80057d0:	0800589b 	.word	0x0800589b
 80057d4:	0800589b 	.word	0x0800589b
 80057d8:	0800589b 	.word	0x0800589b
 80057dc:	0800589b 	.word	0x0800589b
 80057e0:	0800589b 	.word	0x0800589b
 80057e4:	0800589b 	.word	0x0800589b
 80057e8:	0800589b 	.word	0x0800589b
 80057ec:	08005867 	.word	0x08005867
 80057f0:	0800589b 	.word	0x0800589b
 80057f4:	0800589b 	.word	0x0800589b
 80057f8:	0800589b 	.word	0x0800589b
 80057fc:	0800589b 	.word	0x0800589b
 8005800:	0800589b 	.word	0x0800589b
 8005804:	0800589b 	.word	0x0800589b
 8005808:	0800589b 	.word	0x0800589b
 800580c:	0800589b 	.word	0x0800589b
 8005810:	0800589b 	.word	0x0800589b
 8005814:	0800589b 	.word	0x0800589b
 8005818:	0800589b 	.word	0x0800589b
 800581c:	0800589b 	.word	0x0800589b
 8005820:	0800589b 	.word	0x0800589b
 8005824:	0800589b 	.word	0x0800589b
 8005828:	0800589b 	.word	0x0800589b
 800582c:	0800588d 	.word	0x0800588d
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d02e      	beq.n	8005892 <UART_SetConfig+0xa9e>
 8005834:	e031      	b.n	800589a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005836:	f7fd ff33 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 800583a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800583c:	e033      	b.n	80058a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583e:	f7fd ff45 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8005842:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005844:	e02f      	b.n	80058a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005846:	f107 0314 	add.w	r3, r7, #20
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fe76 	bl	800453c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005854:	e027      	b.n	80058a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005856:	f107 0308 	add.w	r3, r7, #8
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe ffc2 	bl	80047e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005864:	e01f      	b.n	80058a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005866:	4b6e      	ldr	r3, [pc, #440]	; (8005a20 <UART_SetConfig+0xc2c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005872:	4b6b      	ldr	r3, [pc, #428]	; (8005a20 <UART_SetConfig+0xc2c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	08db      	lsrs	r3, r3, #3
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	4a69      	ldr	r2, [pc, #420]	; (8005a24 <UART_SetConfig+0xc30>)
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005884:	e00f      	b.n	80058a6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005886:	4b67      	ldr	r3, [pc, #412]	; (8005a24 <UART_SetConfig+0xc30>)
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800588a:	e00c      	b.n	80058a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800588c:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <UART_SetConfig+0xc34>)
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005890:	e009      	b.n	80058a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005898:	e005      	b.n	80058a6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80058a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80ea 	beq.w	8005a82 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	4a5a      	ldr	r2, [pc, #360]	; (8005a1c <UART_SetConfig+0xc28>)
 80058b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c0:	005a      	lsls	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b0f      	cmp	r3, #15
 80058d8:	d916      	bls.n	8005908 <UART_SetConfig+0xb14>
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e0:	d212      	bcs.n	8005908 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f023 030f 	bic.w	r3, r3, #15
 80058ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fa:	4313      	orrs	r3, r2
 80058fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	e0bc      	b.n	8005a82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800590e:	e0b8      	b.n	8005a82 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005910:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005914:	2b20      	cmp	r3, #32
 8005916:	dc4b      	bgt.n	80059b0 <UART_SetConfig+0xbbc>
 8005918:	2b00      	cmp	r3, #0
 800591a:	f2c0 8087 	blt.w	8005a2c <UART_SetConfig+0xc38>
 800591e:	2b20      	cmp	r3, #32
 8005920:	f200 8084 	bhi.w	8005a2c <UART_SetConfig+0xc38>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <UART_SetConfig+0xb38>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	080059b7 	.word	0x080059b7
 8005930:	080059bf 	.word	0x080059bf
 8005934:	08005a2d 	.word	0x08005a2d
 8005938:	08005a2d 	.word	0x08005a2d
 800593c:	080059c7 	.word	0x080059c7
 8005940:	08005a2d 	.word	0x08005a2d
 8005944:	08005a2d 	.word	0x08005a2d
 8005948:	08005a2d 	.word	0x08005a2d
 800594c:	080059d7 	.word	0x080059d7
 8005950:	08005a2d 	.word	0x08005a2d
 8005954:	08005a2d 	.word	0x08005a2d
 8005958:	08005a2d 	.word	0x08005a2d
 800595c:	08005a2d 	.word	0x08005a2d
 8005960:	08005a2d 	.word	0x08005a2d
 8005964:	08005a2d 	.word	0x08005a2d
 8005968:	08005a2d 	.word	0x08005a2d
 800596c:	080059e7 	.word	0x080059e7
 8005970:	08005a2d 	.word	0x08005a2d
 8005974:	08005a2d 	.word	0x08005a2d
 8005978:	08005a2d 	.word	0x08005a2d
 800597c:	08005a2d 	.word	0x08005a2d
 8005980:	08005a2d 	.word	0x08005a2d
 8005984:	08005a2d 	.word	0x08005a2d
 8005988:	08005a2d 	.word	0x08005a2d
 800598c:	08005a2d 	.word	0x08005a2d
 8005990:	08005a2d 	.word	0x08005a2d
 8005994:	08005a2d 	.word	0x08005a2d
 8005998:	08005a2d 	.word	0x08005a2d
 800599c:	08005a2d 	.word	0x08005a2d
 80059a0:	08005a2d 	.word	0x08005a2d
 80059a4:	08005a2d 	.word	0x08005a2d
 80059a8:	08005a2d 	.word	0x08005a2d
 80059ac:	08005a0d 	.word	0x08005a0d
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d02e      	beq.n	8005a12 <UART_SetConfig+0xc1e>
 80059b4:	e03a      	b.n	8005a2c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b6:	f7fd fe73 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 80059ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059bc:	e03c      	b.n	8005a38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059be:	f7fd fe85 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 80059c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059c4:	e038      	b.n	8005a38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fdb6 	bl	800453c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059d4:	e030      	b.n	8005a38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d6:	f107 0308 	add.w	r3, r7, #8
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe ff02 	bl	80047e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059e4:	e028      	b.n	8005a38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e6:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <UART_SetConfig+0xc2c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <UART_SetConfig+0xc2c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <UART_SetConfig+0xc30>)
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a04:	e018      	b.n	8005a38 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <UART_SetConfig+0xc30>)
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a0a:	e015      	b.n	8005a38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <UART_SetConfig+0xc34>)
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a10:	e012      	b.n	8005a38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a18:	e00e      	b.n	8005a38 <UART_SetConfig+0xc44>
 8005a1a:	bf00      	nop
 8005a1c:	08006118 	.word	0x08006118
 8005a20:	58024400 	.word	0x58024400
 8005a24:	03d09000 	.word	0x03d09000
 8005a28:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a36:	bf00      	nop
    }

    if (pclk != 0U)
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d021      	beq.n	8005a82 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <UART_SetConfig+0xcb8>)
 8005a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	441a      	add	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2b0f      	cmp	r3, #15
 8005a66:	d909      	bls.n	8005a7c <UART_SetConfig+0xc88>
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6e:	d205      	bcs.n	8005a7c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	e002      	b.n	8005a82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3738      	adds	r7, #56	; 0x38
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	08006118 	.word	0x08006118

08005ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bae:	d10a      	bne.n	8005bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c04:	f7fb f95c 	bl	8000ec0 <HAL_GetTick>
 8005c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d10e      	bne.n	8005c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f82f 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e025      	b.n	8005c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d10e      	bne.n	8005c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f819 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e00f      	b.n	8005c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b09c      	sub	sp, #112	; 0x70
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9a:	e0a9      	b.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	f000 80a5 	beq.w	8005df0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca6:	f7fb f90b 	bl	8000ec0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8005cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d140      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e6      	bne.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	663b      	str	r3, [r7, #96]	; 0x60
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e5      	bne.n	8005cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e069      	b.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d051      	beq.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5a:	d149      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
 8005d86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	613b      	str	r3, [r7, #16]
   return(result);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005db8:	623a      	str	r2, [r7, #32]
 8005dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	69f9      	ldr	r1, [r7, #28]
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e010      	b.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	f43f af46 	beq.w	8005c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3770      	adds	r7, #112	; 0x70
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e027      	b.n	8005e80 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2224      	movs	r2, #36	; 0x24
 8005e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e02d      	b.n	8005f00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f84f 	bl	8005f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e02d      	b.n	8005f7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f811 	bl	8005f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d108      	bne.n	8005fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fa4:	e031      	b.n	800600a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005faa:	2310      	movs	r3, #16
 8005fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	0e5b      	lsrs	r3, r3, #25
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	0f5b      	lsrs	r3, r3, #29
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	7b3a      	ldrb	r2, [r7, #12]
 8005fd2:	4911      	ldr	r1, [pc, #68]	; (8006018 <UARTEx_SetNbDataToProcess+0x94>)
 8005fd4:	5c8a      	ldrb	r2, [r1, r2]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fda:	7b3a      	ldrb	r2, [r7, #12]
 8005fdc:	490f      	ldr	r1, [pc, #60]	; (800601c <UARTEx_SetNbDataToProcess+0x98>)
 8005fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	7b7a      	ldrb	r2, [r7, #13]
 8005ff0:	4909      	ldr	r1, [pc, #36]	; (8006018 <UARTEx_SetNbDataToProcess+0x94>)
 8005ff2:	5c8a      	ldrb	r2, [r1, r2]
 8005ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ff8:	7b7a      	ldrb	r2, [r7, #13]
 8005ffa:	4908      	ldr	r1, [pc, #32]	; (800601c <UARTEx_SetNbDataToProcess+0x98>)
 8005ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	08006130 	.word	0x08006130
 800601c:	08006138 	.word	0x08006138

08006020 <__libc_init_array>:
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	4d0d      	ldr	r5, [pc, #52]	; (8006058 <__libc_init_array+0x38>)
 8006024:	4c0d      	ldr	r4, [pc, #52]	; (800605c <__libc_init_array+0x3c>)
 8006026:	1b64      	subs	r4, r4, r5
 8006028:	10a4      	asrs	r4, r4, #2
 800602a:	2600      	movs	r6, #0
 800602c:	42a6      	cmp	r6, r4
 800602e:	d109      	bne.n	8006044 <__libc_init_array+0x24>
 8006030:	4d0b      	ldr	r5, [pc, #44]	; (8006060 <__libc_init_array+0x40>)
 8006032:	4c0c      	ldr	r4, [pc, #48]	; (8006064 <__libc_init_array+0x44>)
 8006034:	f000 f82e 	bl	8006094 <_init>
 8006038:	1b64      	subs	r4, r4, r5
 800603a:	10a4      	asrs	r4, r4, #2
 800603c:	2600      	movs	r6, #0
 800603e:	42a6      	cmp	r6, r4
 8006040:	d105      	bne.n	800604e <__libc_init_array+0x2e>
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	f855 3b04 	ldr.w	r3, [r5], #4
 8006048:	4798      	blx	r3
 800604a:	3601      	adds	r6, #1
 800604c:	e7ee      	b.n	800602c <__libc_init_array+0xc>
 800604e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006052:	4798      	blx	r3
 8006054:	3601      	adds	r6, #1
 8006056:	e7f2      	b.n	800603e <__libc_init_array+0x1e>
 8006058:	08006148 	.word	0x08006148
 800605c:	08006148 	.word	0x08006148
 8006060:	08006148 	.word	0x08006148
 8006064:	0800614c 	.word	0x0800614c

08006068 <memcpy>:
 8006068:	440a      	add	r2, r1
 800606a:	4291      	cmp	r1, r2
 800606c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006070:	d100      	bne.n	8006074 <memcpy+0xc>
 8006072:	4770      	bx	lr
 8006074:	b510      	push	{r4, lr}
 8006076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607e:	4291      	cmp	r1, r2
 8006080:	d1f9      	bne.n	8006076 <memcpy+0xe>
 8006082:	bd10      	pop	{r4, pc}

08006084 <memset>:
 8006084:	4402      	add	r2, r0
 8006086:	4603      	mov	r3, r0
 8006088:	4293      	cmp	r3, r2
 800608a:	d100      	bne.n	800608e <memset+0xa>
 800608c:	4770      	bx	lr
 800608e:	f803 1b01 	strb.w	r1, [r3], #1
 8006092:	e7f9      	b.n	8006088 <memset+0x4>

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr
